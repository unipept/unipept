SHELL := /bin/bash -o pipefail

# High level targets {{{ -------------------------------------------------------
all: makefile database index

TABLES= \
	<<<INTDIR>>>/peptides.tsv.gz \
	<<<TABDIR>>>/uniprot_entries.tsv.gz \
	<<<TABDIR>>>/refseq_cross_references.tsv.gz \
	<<<TABDIR>>>/ec_cross_references.tsv.gz \
	<<<TABDIR>>>/embl_cross_references.tsv.gz \
	<<<TABDIR>>>/go_cross_references.tsv.gz \
	<<<INTDIR>>>/proteomes.tsv.gz \
	<<<TABDIR>>>/proteome_cross_references.tsv.gz

database: \
	<<<TABDIR>>>/taxons.tsv.gz \
	<<<TABDIR>>>/lineages.tsv.gz \
	$(TABLES) \
	<<<TABDIR>>>/sequences.tsv.gz \
	<<<TABDIR>>>/peptides.tsv.gz \
	<<<TABDIR>>>/proteomes.tsv.gz \
	<<<TABDIR>>>/ec_numbers.tsv.gz \
	<<<TABDIR>>>/go_terms.tsv.gz

index: <<<TABDIR>>>/<<<KMER_LENGTH>>>-mer.index

ecindex: <<<TABDIR>>>/kmer_ec_ids.tsv.gz

taxons: \
	<<<TABDIR>>>/taxons.tsv.gz \
	<<<TABDIR>>>/lineages.tsv.gz

download: <<<SOURCE_FILES>>>
# }}}

# Configuration check {{{ ------------------------------------------------------
makefile: makefile.in configure
	echo "Please run ./configure before make."
	exit 1
# }}}

# Compiling {{{ ----------------------------------------------------------------
# TODO:
# - split dependencies for this on the class files.
SRC=$(shell find src/ -type f -name '*.java')
JAR=target/unipept-0.0.1-SNAPSHOT.jar
PAC=org.unipept.tools

$(JAR): $(SRC)
	mvn package

%.class: $(JAR)
# }}}

# Taxons and Lineages {{{ ------------------------------------------------------
<<<TAXDIR>>>/taxdmp.zip:
	<<<LOGADD>>> "Started taxon dump download."
	mkdir -p $(dir $@)
	-rm -f $@
	wget --no-verbose "<<<TAXON_URL>>>" -O $@
	<<<LOGADD>>> "Finished taxon dump download."

<<<INTDIR>>>/names.dmp <<<INTDIR>>>/nodes.dmp: <<<TAXDIR>>>/taxdmp.zip
	<<<LOGADD>>> "Started unzipping names and nodes from the taxon dump."
	<<<CMD_UNZIP>>> -o $< $(notdir $@) -d $(dir $@)
	<<<LOGADD>>> "Finished unzipping names and nodes from the taxon dump."

<<<TABDIR>>>/taxons.tsv.gz <<<TABDIR>>>/lineages.tsv.gz: $(JAR) <<<INTDIR>>>/names.dmp <<<INTDIR>>>/nodes.dmp
	<<<LOGADD>>> "Started calculation of taxons and lineages tables."
	mkdir -p $(dir $@)
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).NamesNodes2TaxonsLineages \
		--names <<<INTDIR>>>/names.dmp \
		--nodes <(<<<CMD_SED>>> 's/\(sub\)*cohort/no rank/' <<<INTDIR>>>/nodes.dmp) \
		--taxons >(<<<CMD_GZIP>>> > <<<TABDIR>>>/taxons.tsv.gz) \
		--lineages >(<<<CMD_GZIP>>> > <<<TABDIR>>>/lineages.tsv.gz)
	<<<LOGADD>>> "Finished calculation of taxons and lineages tables."
# }}}

# Uniprot entries, peptides, sequences and cross references {{{ ----------------
$(TABLES): $(JAR) <<<TABDIR>>>/taxons.tsv.gz <<<SOURCE_FILES>>>
	<<<LOGADD>>> "Started calculation of most tables."
	mkdir -p <<<INTDIR>>>
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).TaxonsUniprots2Tables \
		--peptide-min     <<<PEPTIDE_MIN_LENGTH>>> \
		--peptide-max     <<<PEPTIDE_MAX_LENGTH>>> \
		--taxons          <(<<<CMD_ZCAT>>> <<<TABDIR>>>/taxons.tsv.gz) \
		--peptides        >(<<<CMD_GZIP>>> > <<<INTDIR>>>/peptides.tsv.gz) \
		--uniprot-entries >(<<<CMD_GZIP>>> > <<<TABDIR>>>/uniprot_entries.tsv.gz) \
		--refseq          >(<<<CMD_GZIP>>> > <<<TABDIR>>>/refseq_cross_references.tsv.gz) \
		--ec              >(<<<CMD_GZIP>>> > <<<TABDIR>>>/ec_cross_references.tsv.gz) \
		--embl            >(<<<CMD_GZIP>>> > <<<TABDIR>>>/embl_cross_references.tsv.gz) \
		--go              >(<<<CMD_GZIP>>> > <<<TABDIR>>>/go_cross_references.tsv.gz) \
		--proteomes       >(<<<CMD_GZIP>>> > <<<INTDIR>>>/proteomes.tsv.gz) \
		--proteomes-ref   >(<<<CMD_GZIP>>> > <<<TABDIR>>>/proteome_cross_references.tsv.gz) \
		<<<SOURCE_INPUTS>>>
	<<<LOGADD>>> "Finished calculation of most tables."
# }}}

# Sequences with LCA {{{ -------------------------------------------------------
<<<INTDIR>>>/aa_sequence_taxon.tsv.gz: <<<INTDIR>>>/peptides.tsv.gz <<<TABDIR>>>/uniprot_entries.tsv.gz
	<<<LOGADD>>> "Started the joining of equalized peptides and uniprot entries."
	mkdir -p <<<INTDIR>>>
	<<<CMD_JOIN>>> -t '	' -o '1.2,2.2' -j 1 \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/peptides.tsv.gz | <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$4, $$2) }') \
			<(<<<CMD_ZCAT>>> <<<TABDIR>>>/uniprot_entries.tsv.gz | <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$1, $$4) }') \
		| LC_ALL=C <<<CMD_SORT>>> -k1 \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the joining of equalized peptides and uniprot entries."

<<<INTDIR>>>/original_aa_sequence_taxon.tsv.gz: <<<INTDIR>>>/peptides.tsv.gz <<<TABDIR>>>/uniprot_entries.tsv.gz
	<<<LOGADD>>> "Started the joining of non-equalized peptides and uniprot entries."
	mkdir -p <<<INTDIR>>>
	<<<CMD_JOIN>>> -t '	' -o '1.2,2.2' -j 1 \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/peptides.tsv.gz | <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$4, $$3) }') \
			<(<<<CMD_ZCAT>>> <<<TABDIR>>>/uniprot_entries.tsv.gz | <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$1, $$4) }') \
		| LC_ALL=C <<<CMD_SORT>>> -k1 \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the joining of non-equalized peptides and uniprot entries."

<<<INTDIR>>>/sequences.tsv.gz: <<<INTDIR>>>/aa_sequence_taxon.tsv.gz <<<INTDIR>>>/original_aa_sequence_taxon.tsv.gz
	<<<LOGADD>>> "Started the numbering of sequences."
	LC_ALL=C <<<CMD_SORT>>> -m \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/aa_sequence_taxon.tsv.gz | cut -f1) \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/original_aa_sequence_taxon.tsv.gz | cut -f1) \
		| uniq \
		| cat -n \
		| <<<CMD_SED>>> 's/^ *//' \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the numbering of sequences."

<<<TABDIR>>>/peptides.tsv.gz: <<<INTDIR>>>/peptides.tsv.gz <<<INTDIR>>>/sequences.tsv.gz
	<<<LOGADD>>> "Started the substitution of AA's by ID's for the peptides."
	<<<CMD_ZCAT>>> <<<INTDIR>>>/peptides.tsv.gz \
		| LC_ALL=C <<<CMD_SORT>>> -k 2b,2 \
		| <<<CMD_JOIN>>> -t '	' -o '1.1,2.1,1.3,1.4' -1 2 -2 2 - <(<<<CMD_ZCAT>>> <<<INTDIR>>>/sequences.tsv.gz) \
		| LC_ALL=C <<<CMD_SORT>>> -k 3b,3 \
		| <<<CMD_JOIN>>> -t '	' -o '1.1,1.2,2.1,1.4' -1 3 -2 2 - <(<<<CMD_ZCAT>>> <<<INTDIR>>>/sequences.tsv.gz) \
		| LC_ALL=C <<<CMD_SORT>>> -n \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the substitution of AA's by ID's for the peptides."

<<<INTDIR>>>/sequence_taxon.tsv.gz: <<<INTDIR>>>/sequences.tsv.gz <<<INTDIR>>>/aa_sequence_taxon.tsv.gz
	<<<LOGADD>>> "Started the substitution of AA's by ID's for the sequences"
	<<<CMD_JOIN>>> -t '	' -o '1.1,2.2' -1 2 -2 1 \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/sequences.tsv.gz) \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/aa_sequence_taxon.tsv.gz) \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the substitution of AA's by ID's for the sequences"

<<<INTDIR>>>/original_sequence_taxon.tsv.gz: <<<INTDIR>>>/sequences.tsv.gz <<<INTDIR>>>/original_aa_sequence_taxon.tsv.gz
	<<<LOGADD>>> "Started the substitution of AA's by ID's for the original sequences"
	<<<CMD_JOIN>>> -t '	' -o '1.1,2.2' -1 2 -2 1 \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/sequences.tsv.gz) \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/original_aa_sequence_taxon.tsv.gz) \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the substitution of AA's by ID's for the original sequences"

<<<INTDIR>>>/LCAs.tsv.gz: <<<TABDIR>>>/lineages.tsv.gz <<<INTDIR>>>/sequence_taxon.tsv.gz
	<<<LOGADD>>> "Started the calculation of equalized LCA's."
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).LineagesSequencesTaxons2LCAs \
		<(<<<CMD_ZCAT>>> <<<TABDIR>>>/lineages.tsv.gz) \
		<(<<<CMD_ZCAT>>> <<<INTDIR>>>/sequence_taxon.tsv.gz) \
		>(<<<CMD_GZIP>>> > <<<INTDIR>>>/LCAs.tsv.gz)
	<<<LOGADD>>> "Finished the calculation of equalized LCA's."

<<<INTDIR>>>/original_LCAs.tsv.gz: <<<TABDIR>>>/lineages.tsv.gz <<<INTDIR>>>/original_sequence_taxon.tsv.gz
	<<<LOGADD>>> "Started the calculation of non-equalized LCA's."
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).LineagesSequencesTaxons2LCAs \
		<(<<<CMD_ZCAT>>> <<<TABDIR>>>/lineages.tsv.gz) \
		<(<<<CMD_ZCAT>>> <<<INTDIR>>>/original_sequence_taxon.tsv.gz) \
		>(<<<CMD_GZIP>>> > <<<INTDIR>>>/original_LCAs.tsv.gz)
	<<<LOGADD>>> "Finished the calculation of non-equalized LCA's."

<<<INTDIR>>>/FAs.tsv.gz: <<<INTDIR>>>/peptides.tsv.gz
	<<<LOGADD>>> "Started the calculation of equalized FA's."
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).FunctionAnalysisPeptides \
		<(<<<CMD_ZCAT>>> <<<INTDIR>>>/peptides.tsv.gz | cut -f2,5 | LC_ALL=C <<<CMD_SORT>>> -k 1b,1) \
		>(<<<CMD_GZIP>>> - > <<<INTDIR>>>/FAs.tsv.gz)
	<<<LOGADD>>> "Finished the calculation of equalized FA's."
	
<<<INTDIR>>>/original_FAs.tsv.gz: <<<INTDIR>>>/peptides.tsv.gz
	<<<LOGADD>>> "Started the calculation of non-equalized FA's."
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).FunctionAnalysisPeptides \
		<(<<<CMD_ZCAT>>> <<<INTDIR>>>/peptides.tsv.gz | cut -f3,5 | LC_ALL=C <<<CMD_SORT>>> -k 1b,1) \
		>(<<<CMD_GZIP>>> - > <<<INTDIR>>>/original_FAs.tsv.gz)
	<<<LOGADD>>> "Finished the calculation of non-equalized FA's."


<<<TABDIR>>>/sequences.tsv.gz: <<<INTDIR>>>/sequences.tsv.gz <<<INTDIR>>>/LCAs.tsv.gz <<<INTDIR>>>/original_LCAs.tsv.gz <<<INTDIR>>>/original_FAs.tsv.gz <<<INTDIR>>>/FAs.tsv.gz
	<<<LOGADD>>> "Started the creation of the sequences table."
	<<<CMD_ZCAT>>> <<<INTDIR>>>/sequences.tsv.gz \
		| <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$1, $$2) }' \
		| <<<CMD_JOIN>>> --nocheck-order -a1 -e '\N' -t '	' -o "1.1 1.2 2.2"                       - <(<<<CMD_ZCAT>>> <<<INTDIR>>>/original_LCAs.tsv.gz | <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$1, $$2) }') \
		| <<<CMD_JOIN>>> --nocheck-order -a1 -e '\N' -t '	' -o "1.1 1.2 1.3 2.2"                   - <(<<<CMD_ZCAT>>> <<<INTDIR>>>/LCAs.tsv.gz          | <<<CMD_AWK>>> '{ printf("%012d\t%s\n", $$1, $$2) }') \
		| <<<CMD_JOIN>>> --nocheck-order -a1 -e '\N' -t '	' -o '1.1 1.2 1.3 1.4 2.2'     -1 2 -2 1 - <(<<<CMD_ZCAT>>> <<<INTDIR>>>/original_FAs.tsv.gz) \
		| <<<CMD_JOIN>>> --nocheck-order -a1 -e '\N' -t '	' -o '1.1 1.2 1.3 1.4 1.5 2.2' -1 2 -2 1 - <(<<<CMD_ZCAT>>> <<<INTDIR>>>/FAs.tsv.gz) \
		| <<<CMD_SED>>> 's/^0*//' \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the creation of the sequences table."
# }}}

# K-mers {{{ -------------------------------------------------------------------
# - Take uniprot_entries from tryptic peptides
# - int/peptides <- cut index and sequence from uniprot-entries and split in k-mers (| cat -n) (- equated)
# - int/original_aa_sequence_taxon <- cut taxon-id and sequence from uniprot-entries and split in k-mers (| sort) (- duplicates???)
# - int/sequences <- cut sequence from uniprot-entries and split (| sort | uniq | cat -n | sed 's/^ *//)
#                 <- cut peptide from int/original_aa_sequence (| uniq | cat -n | sed 's/^ *//)
# - int/original_sequence_taxon <- directly from ori_aa_seq_tax by counting the aa_seq along the way?
#                                  and we can output sequences at the same time?
#                               <- the old way, joining int/sequences and ori_aaseq_taxon
# - int/original_lca <- the old way, from tab/lineages and int/ori_seq_taxon
#                    <- directly from ori_aa_seq_tax by counting aa_seq along te way?
#                       and we can output sequences at the same time?
#                       (or output sequences instead of numbers wait isn't that sequences.tsv.gz?)
# - tab/peptides.index <- umgap buildindex on the output of above (without the enumeration?
#
# optimal:
# uniprot-entries from tryptic peptides
# | cut taxon-id and sequence and split in k-mers (|sort)
# | with lineages, the old java-way but with sequences in stead of numbers
# | umgap buildindex

<<<INTDIR>>>/<<<KMER_LENGTH>>>-mer_sequence_taxon.tsv.gz: <<<TABDIR>>>/uniprot_entries.tsv.gz
	<<<LOGADD>>> "Started the enumeration of <<<KMER_LENGTH>>>-mers."
	<<<CMD_ZCAT>>> <<<TABDIR>>>/uniprot_entries.tsv.gz \
		| cut -f4,7 \
		| <<<CMD_AWK>>> -v OFS='	' '{ for(i = length($$2) - <<<KMER_LENGTH>>> + 1; i > 0; i -= 1) print(substr($$2, i, <<<KMER_LENGTH>>>), $$1) }' \
		| <<<CMD_SORT>>> \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished the enumeration of <<<KMER_LENGTH>>>-mers."

<<<INTDIR>>>/<<<KMER_LENGTH>>>-mer_LCAs.tsv.gz: <<<INTDIR>>>/<<<KMER_LENGTH>>>-mer_sequence_taxon.tsv.gz <<<TABDIR>>>/lineages.tsv.gz
	<<<LOGADD>>> "Started the calculation of <<<KMER_LENGTH>>>-mer LCA's."
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).LineagesSequencesTaxons2LCAs \
		<(<<<CMD_ZCAT>>> <<<TABDIR>>>/lineages.tsv.gz) \
		<(<<<CMD_ZCAT>>> <<<INTDIR>>>/<<<KMER_LENGTH>>>-mer_sequence_taxon.tsv.gz) \
		>(<<<CMD_GZIP>>> > $@)
	<<<LOGADD>>> "Finished the calculation of <<<KMER_LENGTH>>>-mer LCA's."

<<<TABDIR>>>/<<<KMER_LENGTH>>>-mer.index: <<<INTDIR>>>/<<<KMER_LENGTH>>>-mer_LCAs.tsv.gz
	<<<LOGADD>>> "Started the construction of the <<<KMER_LENGTH>>>-mer index."
	<<<CMD_ZCAT>>> $< | umgap buildindex > $@
	<<<LOGADD>>> "Finished the construction of the <<<KMER_LENGTH>>>-mer index."
# }}}

# Proteomes {{{ ----------------------------------------------------------------

<<<INTDIR>>>/proteomes_data.tsv.gz: $(JAR) <<<INTDIR>>>/proteomes.tsv.gz
	<<<LOGADD>>> "Started fetching of proteome data."
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).FetchProteomes \
		<(<<<CMD_ZCAT>>> <<<INTDIR>>>/proteomes.tsv.gz) \
		>(<<<CMD_SORT>>> -t $$'\t' -k 6 | <<<CMD_GZIP>>> > $@) # sort by assembly
	<<<LOGADD>>> "Finished fetching of proteome data."

<<<INTDIR>>>/proteomes_type_strains.tsv.gz: type_strains.sh
	<<<LOGADD>>> "Started fetching of type strain data."
	./type_strains.sh | <<<CMD_SED>>> 's/$$/\t1/' | <<<CMD_GZIP>>> > $@
	<<<LOGADD>>> "Finished fetching of type strain data."


<<<TABDIR>>>/proteomes.tsv.gz: <<<INTDIR>>>/proteomes_data.tsv.gz <<<INTDIR>>>/proteomes_type_strains.tsv.gz 
	<<<LOGADD>>> "Started adding type strain boolean to proteome data."
	# tmp: 1)id 2)accession-id 3)name-str 4)reference-bool 5)strain-id 6)assembly-id
	# strain: assembly-id

	# join: 1)assembly-id 2)id 3)accession-id 4)name-str 5)reference-int 6)strain-id 7)strain-int
	# awk: id accession-id name-str TAXON strain-bool reference-bool strain-id assembly-id
	<<<CMD_JOIN>>> -1 6 -2 1 -a 1 -e"0" -t $$'\t' -o "1.1 1.2 1.3 2.2 1.5 1.4 1.6 1.7" \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/proteomes_data.tsv.gz) \
			<(<<<CMD_ZCAT>>> <<<INTDIR>>>/proteomes_type_strains.tsv.gz) \
		| <<<CMD_AWK>>> 'function b(a){if (a == 1)return "\x01"; return "\x00"} \
		       BEGIN { FS = OFS = "\t" }{ print $$1,$$2,$$3,"\\N",b($$4),b($$5),$$6,$$7,$$8 }' \
		| <<<CMD_SORT>>> -n \
		| <<<CMD_GZIP>>> \
		> $@
	<<<LOGADD>>> "Finished adding type strain boolean to proteome data."
# }}}

# Functional Data {{{ ----------------------------------------------------------
<<<TABDIR>>>/ec_numbers.tsv.gz: createEcNumbers.sh
	<<<LOGADD>>> "Started creating EC numbers"
	mkdir -p $(dir $@)
	./createEcNumbers.sh | <<<CMD_GZIP>>> > $@
	<<<LOGADD>>> "Finished creating EC numbers."

<<<TABDIR>>>/go_terms.tsv.gz: createGoTerms.sh
	<<<LOGADD>>> "Started creating GO terms"
	./createGoTerms.sh | <<<CMD_GZIP>>> > $@
	<<<LOGADD>>> "Finished creating GO terms."
# }}}

# EC Index {{{ ----------------------------------------------------------------
<<<INTDIR>>>/kmer_ec_data.tsv.gz: <<<TABDIR>>>/ec_numbers.tsv.gz <<<TABDIR>>>/ec_cross_references.tsv.gz <<<TABDIR>>>/uniprot_entries.tsv.gz
	<<<LOGADD>>> "Started creating intermediate kmer-ec data"
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).Kmer2ECs \
		<<<KMER_LENGTH>>> \
		<(<<<CMD_ZCAT>>> <<<TABDIR>>>/ec_numbers.tsv.gz) \
		<(<<<CMD_ZCAT>>> <<<TABDIR>>>/ec_cross_references.tsv.gz) \
		<(<<<CMD_ZCAT>>> <<<TABDIR>>>/uniprot_entries.tsv.gz) \
		| <<<CMD_GZIP>>> > $@
	<<<LOGADD>>> "Finished creating intermediate kmer-ec data"

<<<INTDIR>>>/kmer_ec_data_sorted.tsv.gz: <<<INTDIR>>>/kmer_ec_data.tsv.gz
	<<<LOGADD>>> "Started sorting intermediate kmer-ec data"
	LC_ALL=C <<<CMD_SORT>>> -k1 \
		<(<<<CMD_ZCAT>>> $<) \
		| <<<CMD_GZIP>>> > $@
	<<<LOGADD>>> "Finished sorting intermediate kmer-ec data"

<<<TABDIR>>>/kmer_ec_ids.tsv.gz: <<<INTDIR>>>/kmer_ec_data_sorted.tsv.gz
	<<<LOGADD>>> "Started creating kmer-ec index"
	java -Xms<<<JAVA_MEM>>> -Xmx<<<JAVA_MEM>>> -cp $(JAR) $(PAC).CollectKmerECs \
		<(<<<CMD_ZCAT>>> $<) \
		| <<<CMD_GZIP>>> > $@
	<<<LOGADD>>> "Finished creating kmer-ec index"

# }}}

.PHONY: clean_intermediates
clean_intermediates:
	rm -vf <<<INTDIR>>>/*

.PHONY: clean
clean: clean_intermediates
	rm -vf <<<TABDIR>>>/*

.PHONY: pristine
pristine: clean
	rm -vf $(JAR)
	rm -vf <<<TAXDIR>>>/taxdmp.zip
	rm -vf <<<SOURCE_FILES>>>

# vim: foldmethod=marker
