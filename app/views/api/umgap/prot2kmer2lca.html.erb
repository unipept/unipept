<div class="apidocs row">
  <div class="col-xs-9">
    <div class='page-header'>
      <h1 class='api-title'>
        <samp>umgap prot2kmer2lca</samp><br>
        <small>Maps all K-mers in a <span class='initialism'>FASTA</span> stream of peptides to taxon IDs.</small>
      </h1>
    </div>
    <p>The <code>umgap prot2kmer2lca</code> command takes one or more peptides as input and outputs the lowest
    common ancestors of their K-mers.</p>
    <div class='card'>
      <div class='card-title card-title-colored'>
        <h2 class='card-title-text' id='input'>Usage</h2>
      </div>
      <div class='card-supporting-text'>
        <p>The input is given on <em>standard input</em> in a <span class="initialism">FASTA</span> format. Per <span class="initialism">FASTA</span> header should be a single
        peptide, which may be hardwrapped with newlines.</p>
        <p>All overlapping K-mers in these peptides (<em>K</em> configurable via the <samp>-k</samp> option, and 9 by
        default) are searched for in the <span class="initialism">FST</span> index passed as argument. The results are printed out.</p>
        <pre>
<b>$</b> cat input.fa
&gt;header1
DAIGDVAKAYKKAG*S
<b>$</b> umgap prot2kmer2lca -k9 uniprot-2020-04-9mer.index &lt; input.fa
&gt;header1
571525
571525
6920
6920
1
6920
        </pre>
        <p>Add the <samp>-o</samp> option to print out 0 for K-mers not found in the index.</p>
        <pre>
<b>$</b> umgap prot2kmer2lca -o uniprot-2020-04-9mer.index &lt; input.fa
&gt;header1
571525
571525
6920
6920
1
6920
0
0
        </pre>
        <p>This command also allows an alternative mode of operation. When left on disk, it can take some
        time for the index to be searched. With the <samp>-m</samp> flag, the complete index will be loaded in
        memory before operation. This, too, takes some time, but for a single large analysis, this is no
        hindrance. When processing many short files, the index would need to be loaded again and again.
        Instead of using this command as part of a pipeline, <code>... | umgap prot2kmer2lca index | ...</code>, it
        can run in a separate (and persistent) process, reusing the same loaded index. Run <code>umgap prot2kmer2lca -m -s umgap-socket index</code> somewhere, and when the index is loaded, change your
        original pipeline(s) to communicate with the socket using <a href='http://man.openbsd.org/nc'>OpenBSD's netcat</a>: <code>... | nc -NU /path/to/umgap-socket | ...</code>.</p>
        <dl class='dl-horizontal'>
          <dt><samp>-m</samp> / <samp>--in-memory</samp></dt><dd>Load <span class="initialism">FST</span> in memory instead of mmap'ing the file contents. This makes querying significantly faster, but requires some time to load the <span class="initialism">FST</span> into memory</dd>
          <dt><samp>-h</samp> / <samp>--help</samp></dt><dd>Prints help information</dd>
          <dt><samp>-o</samp> / <samp>--one-on-one</samp></dt><dd>Map unknown sequences to 0 instead of ignoring them</dd>
          <dt><samp>-V</samp> / <samp>--version</samp></dt><dd>Prints version information</dd>
        </dl>
        <dl class='dl-horizontal'>
          <dt><samp>-c</samp> / <samp>--chunksize <em>chunk-size</em></samp></dt><dd>How much reads to group together in one chunk, bigger chunks decrease the overhead caused by multithreading. Because the output order is not necessarily the same as the input order, having a chunk size which is a multiple of 12 (all 6 translations multiplied by the two paired-end reads) will keep <span class="initialism">FASTA</span> records of the same reads together [default: 240]</dd>
          <dt><samp>-l</samp> / <samp>--length <em>length</em></samp></dt><dd>The length of the K-mers in the <span class="initialism">FST</span> [default: 9]</dd>
          <dt><samp>-s</samp> / <samp>--socket <em>socket</em></samp></dt><dd>Instead of reading from <em>stdin</em> and writing to <em>stdout</em>, create a Unix socket to communicate with using <a href='http://man.openbsd.org/nc'>OpenBSD's netcat</a> (<samp>nc -NU <em>socket</em></samp>). This is especially useful in combination with the <samp>--in-memory</samp> flag: you only have to load the <span class="initialism">FST</span> in memory once, after which you can query it without having the loading time overhead each time</dd>
        </dl>
      </div>
    </div>
  </div>
  <div class="col-xs-3">
    <%= render 'api/shared/sidebar' %>
  </div>
</div>
