import{d as T,i as s,j as V,o as R,c as S,w as t,l as x,bx as C,g as a,a as l,b as e,K as I}from"./index-eea28a33.js";import{H as m}from"./HeaderBodyCard-3295d4c5.js";import{I as i}from"./InlineCode-67d03729.js";import{I as n}from"./Initialism-440d96b0.js";import{S as g}from"./StaticAlert-5833da9d.js";import{E as d,T as q}from"./TryItCard-91655383.js";import{R as p}from"./ResourceLink-d34b4283.js";import{V as L}from"./VDivider-834b9f8e.js";import{V as Y}from"./VTable-9d8ead1f.js";import{a as D,V as _}from"./VRow-94e3f3e6.js";import{V as j,a as P}from"./VTextarea-ac294625.js";import"./VCard-9d59c194.js";import"./_plugin-vue_export-helper-c27b6911.js";import"./VAlert-6315e811.js";import"./Boxed-9f9dd66a.js";import"./VField-cc36921e.js";import"./forwardRefs-e2994a01.js";const Q={class:"font-weight-light"},k={class:"font-weight-light"},K=a("h3",{class:"font-weight-medium"}," input ",-1),U=a("h3",{class:"font-weight-medium"}," equate_il ",-1),O=a("i",null,"Equate I and L",-1),z=a("h3",{class:"font-weight-medium"}," extra ",-1),B={class:"my-3"},H=a("thead",null,[a("tr",null,[a("th",{class:"text-start"}," Name "),a("th",{class:"text-start"}," Description ")])],-1),N=a("tr",null,[a("td",null,[a("b",null,"Input[]"),a("br"),a("i",{style:{"font-size":"85%"}},"required")]),a("td",{class:"py-3"},[e(" Tryptic peptide to search for. Add multiple parameters to search for multiple peptides. "),a("br"),a("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: string ")])],-1),W=a("td",null,[a("b",null,"equate_il"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1),X={class:"py-3"},G=a("br",null,null,-1),M={class:"mt-3",style:{"font-size":"85%"}},J=a("td",null,[a("b",null,"extra"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1),F={class:"py-3"},Z=a("br",null,null,-1),$={class:"mt-3",style:{"font-size":"85%"}},ee=a("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1),te=a("h3",{class:"font-weight-medium"}," Input[] ",-1),le=a("h3",{class:"font-weight-medium"}," Parameters ",-1),ge=T({__name:"APIPept2EcPage",setup(ae){const r=new C,A=s({}),b=s({}),y=s({}),w=s({}),c=s(""),h=s(!1),f=s(!1),E=s({}),v=async()=>{E.value=await r.pept2ec(c.value.split(`
`),h.value,f.value)};return V(async()=>{A.value=await r.pept2ec(["AIPQLEVARPADAYETAEAYR"]),b.value=await r.pept2ec(["AIPQLEVARPADAYETAEAYR","APVLSDSSCK"]),y.value=await r.pept2ec(["APVLSDSSCK"],!0,void 0),w.value=await r.pept2ec(["AIPQLEVARPADAYETAEAYR"],void 0,!0)}),(ie,u)=>(R(),S(x,null,{default:t(()=>[a("h1",Q,[l(n,null,{default:t(()=>[e("POST")]),_:1}),e(" /api/v1/pept2ec ")]),a("h3",k,[e(" Returns the functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers associated with a given tryptic peptide. ")]),l(L,{class:"my-2"}),a("p",null,[e(" This method returns the functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers associated with a given tryptic peptide. This is the same information as provided when performing a search with the "),l(p,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),l(m,{id:"request",title:"Request","large-title":""},{default:t(()=>[a("p",null,[e(" The pept2ec method can be used by doing a "),l(n,null,{default:t(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),l(n,null,{default:t(()=>[e("GET")]),_:1}),e("-request to "),l(i,null,{default:t(()=>[e("https://api.unipept.ugent.be/api/v1/pept2ec")]),_:1}),e(". "),l(p,{to:"#parameters",router:""},{default:t(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),l(n,null,{default:t(()=>[e("POST")]),_:1}),e(") or in the query string ("),l(n,null,{default:t(()=>[e("GET")]),_:1}),e("). The only required parameter is "),l(i,null,{default:t(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),K,a("p",null,[l(i,null,{default:t(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes one or more tryptic peptides. Unipept will return the functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers associated with each of the "),l(i,null,{default:t(()=>[e("input[]")]),_:1}),e(" peptides based on their occurrence in UniProt entries. To pass multiple peptides at once, simply add multiple "),l(i,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameters (see "),l(p,{to:"#example2",router:""},{default:t(()=>[e("example")]),_:1}),e("). ")]),l(g,{title:"Input size"},{default:t(()=>[a("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),l(i,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),l(n,null,{default:t(()=>[e("GET")]),_:1}),e("-request, exceed the maximum "),l(n,null,{default:t(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),U,a("p",null,[l(i,null,{default:t(()=>[e("equate_il")]),_:1}),e(" is an optional parameter and can either be "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(i,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(i,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(", isoleucine (I) and leucine (L) are equated when matching tryptic peptides to UniProt entries. This setting is similar to checking the "),O,e(" checkbox when performing a search with the "),l(p,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),z,a("p",null,[l(i,null,{default:t(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(i,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(i,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will also return the name associated with an"),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-number. See the "),l(p,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),l(g,{title:"Performance penalty"},{default:t(()=>[a("p",null,[e(" Setting "),l(i,null,{default:t(()=>[e("extra")]),_:1}),e(" to "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),l(m,{id:"response",title:"Response",class:"mt-5","large-title":""},{default:t(()=>[e(" A list of "),l(n,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects is returned. By default, each object contains the following information fields: "),a("ul",B,[a("li",null,[l(i,null,{default:t(()=>[e("peptide")]),_:1}),e(": the peptide that was searched for. ")]),a("li",null,[l(i,null,{default:t(()=>[e("total_protein_count")]),_:1}),e(": total amount of proteins matched with the given peptide. ")]),a("li",null,[l(i,null,{default:t(()=>[e("ec")]),_:1}),e(": A list of "),l(n,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent an "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-number associated with the current tryptic peptide. "),a("ul",null,[a("li",null,[l(i,null,{default:t(()=>[e("ec_number")]),_:1}),e(": "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-number associated with the current tryptic peptide. ")]),a("li",null,[l(i,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current"),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-number. ")]),a("li",null,[l(i,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-number. Included when the "),l(i,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])])])]),_:1}),l(m,{id:"parameters",title:"Parameters",class:"mt-5","large-title":""},{default:t(()=>[l(Y,null,{default:t(()=>[H,a("tbody",null,[N,a("tr",null,[W,a("td",X,[e(" Equate isoleucine (I) and leucine (L). "),G,a("div",M,[e(" Value: Must be "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(i,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),a("tr",null,[J,a("td",F,[e(" Return additional information fields if "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(". "),Z,a("div",$,[e(" Value: Must be "),l(i,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(i,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),ee,l(d,{title:"Retrieve the functional ec-numbers associated with a given tryptic peptide",response:A.value},{description:t(()=>[e(" This example retrieves all functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers associated with the tryptic peptide "),a("i",null,[l(n,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(". The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2ec -d 'input[]=AIPQLEVARPADAYETAEAYR' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2ec.json?input[]=AIPQLEVARPADAYETAEAYR ")]),_:1},8,["response"]),l(d,{id:"example2",class:"mt-5",title:"Retrieve the functional ec-numbers associated with each of multiple tryptic peptides",response:b.value},{description:t(()=>[e(" This example retrieves the functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers for both the tryptic peptides "),a("i",null,[l(n,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" and "),a("i",null,[l(n,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". The result is the same as the combination of this search and this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2ec -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'input[]=APVLSDSSCK' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2ec.json?input[]=AIPQLEVARPADAYETAEAYR&input[]=APVLSDSSCK ")]),_:1},8,["response"]),l(d,{class:"mt-5",title:"Retrieve the functional ec-numbers associated with a single tryptic peptide, while equating I and L",response:y.value},{description:t(()=>[e(" This example retrieves the functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers associated with the tryptic peptide "),a("i",null,[l(n,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". In searching, isoleucine (I) and leucinge (L) are considered equal. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2ec -d 'input[]=APVISDSSCK' -d 'equate_il=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2ec.json?input[]=APVISDSSCK&equate_il=true ")]),_:1},8,["response"]),l(d,{class:"mt-5",title:"Retrieve the functional ec-numbers associated with a single tryptic peptide, with extra information enabled",response:w.value},{description:t(()=>[e(" This example retrieves the functional "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers associated with the tryptic peptide "),a("i",null,[l(n,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" including the name of each "),l(n,null,{default:t(()=>[e("EC")]),_:1}),e("-number. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2ec -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2ec.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true ")]),_:1},8,["response"]),l(q,{id:"try",class:"mt-5",response:E.value,command:"pept2ec"},{default:t(()=>[l(D,null,{default:t(()=>[l(_,{cols:"12"},{default:t(()=>[te,l(j,{modelValue:c.value,"onUpdate:modelValue":u[0]||(u[0]=o=>c.value=o),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),l(_,{cols:"12",class:"dark-label"},{default:t(()=>[le,l(P,{modelValue:f.value,"onUpdate:modelValue":u[1]||(u[1]=o=>f.value=o),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),l(P,{modelValue:h.value,"onUpdate:modelValue":u[2]||(u[2]=o=>h.value=o),color:"primary",inset:"",label:"equate_il",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),l(_,{cols:"12"},{default:t(()=>[l(I,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:v},{default:t(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});export{ge as default};
