import{s as B,v as R,x as F,y as E,z as M,A as D,B as L,C as N,a as e,m as y,d as k,i as p,D as $,o as C,c as P,w as t,E as K,b as r,H as G,u as Y,I as z,g as h,J as H,K as J,l as Z}from"./index-eea28a33.js";import{R as j}from"./ResourceLink-d34b4283.js";import{m as O,V as x,a as Q,b as W}from"./VForm-1f048278.js";import{a as v,V as c}from"./VRow-94e3f3e6.js";import{V as X}from"./VTooltip-c672ae0b.js";import{m as ee,u as te,V as g}from"./VField-cc36921e.js";import{a as ae,b as oe}from"./VCard-9d59c194.js";import"./_plugin-vue_export-helper-c27b6911.js";import"./forwardRefs-e2994a01.js";import"./VOverlay-cd0f1a97.js";import"./delay-68c851b5.js";const le=B({...ee(),...R(O(),["inline"])},"VCheckbox"),se=F()({name:"VCheckbox",inheritAttrs:!1,props:le(),emits:{"update:modelValue":a=>!0,"update:focused":a=>!0},setup(a,n){let{attrs:i,slots:d}=n;const o=E(a,"modelValue"),{isFocused:m,focus:f,blur:V}=te(a),s=M(),l=D(()=>a.id||`checkbox-${s}`);return L(()=>{const[u,b]=N(i),[q,de]=g.filterProps(a),[I,ce]=x.filterProps(a);return e(g,y({class:["v-checkbox",a.class]},u,q,{modelValue:o.value,"onUpdate:modelValue":_=>o.value=_,id:l.value,focused:m.value,style:a.style}),{...d,default:_=>{let{id:w,messagesId:T,isDisabled:S,isReadonly:U}=_;return e(x,y(I,{id:w.value,"aria-describedby":T.value,disabled:S.value,readonly:U.value},b,{modelValue:o.value,"onUpdate:modelValue":A=>o.value=A,onFocus:f,onBlur:V}),d)}})}),{}}}),ue={class:"mb-0"},re=h("b",null,"5",-1),ne=h("b",null,"50",-1),ie=k({__name:"TrypticPeptideAnalysisSearchCard",setup(a){const n=p(!1),i=p(""),d=p(!0),o=p(null),m=[s=>/^[A-Z]+$/.test(s.toUpperCase())||"Peptide can only consist of letters",s=>s.length>=5&&s.length<=50||"Peptide should consist of 5 to 50 characters"],f=$(),V=async function(){o.value&&await o.value.validate()&&f.push({name:"tpaResult",params:{sequence:i.value.toUpperCase()},query:{equate:d.value.toString()}})};return(s,l)=>(C(),P(oe,null,{default:t(()=>[e(G,{style:{"pointer-events":"none"},"slider-color":"primary","bg-color":"primary",dark:""},{default:t(()=>[e(K,null,{default:t(()=>[r(" Search for a single tryptic peptide ")]),_:1})]),_:1}),e(ae,null,{default:t(()=>[e(Y(Q),{ref_key:"form",ref:o,modelValue:n.value,"onUpdate:modelValue":l[2]||(l[2]=u=>n.value=u),onSubmit:z(V,["prevent"])},{default:t(()=>[e(v,null,{default:t(()=>[e(c,null,{default:t(()=>[h("p",ue,[r(" Search for a single tryptic peptide (e.g. "),e(j,{to:"/tpa/MDGTEYIIVK?equate=true",router:""},{default:t(()=>[r("MDGTEYIIVK")]),_:1}),r(") by entering the sequence below. Note that your input should only consist of "),re,r(" to "),ne,r(" amino acids. Lowercase letters are allowed, but will be converted to their uppercase equivalent. ")])]),_:1})]),_:1}),e(v,null,{default:t(()=>[e(c,{class:"pb-0",cols:"12"},{default:t(()=>[e(W,{modelValue:i.value,"onUpdate:modelValue":l[0]||(l[0]=u=>i.value=u),modelModifiers:{trim:!0},class:"pt-0 mt-0",label:"Sequence",rules:m,density:"compact",autofocus:"",variant:"underlined"},null,8,["modelValue"])]),_:1})]),_:1}),e(v,null,{default:t(()=>[e(c,{class:"py-0",cols:"12",md:"6"},{default:t(()=>[e(X,{text:"Equate isoleucine (I) and leucine (L) when matching peptides to UniProt entries."},{activator:t(({props:u})=>[e(se,y({modelValue:d.value,"onUpdate:modelValue":l[1]||(l[1]=b=>d.value=b),label:"Equate I and L?"},u,{color:"primary"}),null,16,["modelValue"])]),_:1})]),_:1}),e(c,{class:"d-flex",cols:"12",md:"6"},{default:t(()=>[e(H),e(J,{color:"primary",disabled:!n.value,"prepend-icon":"mdi-magnify",type:"submit"},{default:t(()=>[r(" Search ")]),_:1},8,["disabled"])]),_:1})]),_:1})]),_:1},8,["modelValue","onSubmit"])]),_:1})]),_:1}))}}),ke=k({__name:"TrypticPeptideAnalysisPage",setup(a){return(n,i)=>(C(),P(Z,null,{default:t(()=>[e(c,{cols:"12",lg:"8","offset-lg":"2"},{default:t(()=>[e(ie)]),_:1})]),_:1}))}});export{ke as default};
