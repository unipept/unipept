import{d as I,i as s,j as S,o as L,c as Y,w as t,l as q,bx as D,g as a,a as l,b as e,K as k,p as C,q as Q}from"./index-eea28a33.js";import{H as g}from"./HeaderBodyCard-3295d4c5.js";import{I as n}from"./InlineCode-67d03729.js";import{I as i}from"./Initialism-440d96b0.js";import{S as V}from"./StaticAlert-5833da9d.js";import{E as c,T as j}from"./TryItCard-91655383.js";import{R as p}from"./ResourceLink-d34b4283.js";import{V as U}from"./VDivider-834b9f8e.js";import{V as z}from"./VTable-9d8ead1f.js";import{a as B,V as y}from"./VRow-94e3f3e6.js";import{V as K,a as b}from"./VTextarea-ac294625.js";import{_ as O}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-9d59c194.js";import"./VAlert-6315e811.js";import"./Boxed-9f9dd66a.js";import"./VField-cc36921e.js";import"./forwardRefs-e2994a01.js";const u=m=>(C("data-v-d3c481a4"),m=m(),Q(),m),W={class:"font-weight-light"},H=u(()=>a("h3",{class:"font-weight-light"}," Returns the taxonomic lowest common ancestor for a given tryptic peptide. ",-1)),N=u(()=>a("h3",{class:"font-weight-medium"}," input ",-1)),X=u(()=>a("h3",{class:"font-weight-medium"}," equate_il ",-1)),M=u(()=>a("i",null,"Equate I and L",-1)),G=u(()=>a("h3",{class:"font-weight-medium"}," extra ",-1)),J=u(()=>a("h3",{class:"font-weight-medium"}," names ",-1)),F={class:"my-3"},Z={class:"multi-column my-3"},$={class:"multi-column mt-3"},ee=u(()=>a("thead",null,[a("tr",null,[a("th",{class:"text-start"}," Name "),a("th",{class:"text-start"}," Description ")])],-1)),te=u(()=>a("tr",null,[a("td",null,[a("b",null,"Input[]"),a("br"),a("i",{style:{"font-size":"85%"}},"required")]),a("td",{class:"py-3"},[e(" Tryptic peptide to search for. Add multiple parameters to search for multiple peptides. "),a("br"),a("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: string ")])],-1)),le=u(()=>a("td",null,[a("b",null,"equate_il"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),ae={class:"py-3"},ne=u(()=>a("br",null,null,-1)),ie={class:"mt-3",style:{"font-size":"85%"}},ue=u(()=>a("td",null,[a("b",null,"extra"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),se={class:"py-3"},oe=u(()=>a("br",null,null,-1)),re={class:"mt-3",style:{"font-size":"85%"}},de=u(()=>a("td",null,[a("b",null,"names"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),pe={class:"py-3"},ce=u(()=>a("br",null,null,-1)),me={class:"mt-3",style:{"font-size":"85%"}},fe=u(()=>a("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1)),_e=u(()=>a("h3",{class:"font-weight-medium"}," Input[] ",-1)),he=u(()=>a("h3",{class:"font-weight-medium"}," Parameters ",-1)),Ae=I({__name:"APIPept2LcaPage",setup(m){const d=new D,v=s({}),w=s({}),P=s({}),x=s({}),T=s({}),f=s(""),_=s(!1),h=s(!1),A=s(!1),E=s({}),R=async()=>{E.value=await d.pept2lca(f.value.split(`
`),_.value,h.value,A.value)};return S(async()=>{v.value=await d.pept2lca(["AIPQLEVARPADAYETAEAYR"]),w.value=await d.pept2lca(["AIPQLEVARPADAYETAEAYR","APVLSDSSCK"]),P.value=await d.pept2lca(["APVLSDSSCK"],!0,void 0,void 0),x.value=await d.pept2lca(["AIPQLEVARPADAYETAEAYR"],void 0,!0,void 0),T.value=await d.pept2lca(["AIPQLEVARPADAYETAEAYR"],void 0,!0,!0)}),(ge,o)=>(L(),Y(q,null,{default:t(()=>[a("h1",W,[l(i,null,{default:t(()=>[e("POST")]),_:1}),e(" /api/v1/pept2lca ")]),H,l(U,{class:"my-2"}),a("p",null,[e(" This method returns the taxonomic lowest common ancestor for a given tryptic peptide. This is the same information as provided when performing a search with the "),l(p,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),l(g,{id:"request",title:"Request","large-title":""},{default:t(()=>[a("p",null,[e(" The pept2lca method can be used by doing a "),l(i,null,{default:t(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("-request to "),l(n,null,{default:t(()=>[e("https://api.unipept.ugent.be/api/v1/pept2lca")]),_:1}),e(". "),l(p,{to:"#parameters",router:""},{default:t(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),l(i,null,{default:t(()=>[e("POST")]),_:1}),e(") or in the query string ("),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("). The only required parameter is "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),N,a("p",null,[l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes one or more tryptic peptides. Unipept will return the taxonomic lowest common ancestor for each of the "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" peptides based on their occurrence in UniProt entries. To pass multiple peptides at once, simply add multiple "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameters (see "),l(p,{to:"#example2",router:""},{default:t(()=>[e("example")]),_:1}),e("). ")]),l(V,{title:"Input size"},{default:t(()=>[a("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("-request, exceed the maximum"),l(i,null,{default:t(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),X,a("p",null,[l(n,null,{default:t(()=>[e("equate_il")]),_:1}),e(" is an optional parameter and can either be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", isoleucine (I) and leucine (L) are equated when matching tryptic peptides to UniProt entries. This setting is similar to checking the "),M,e(" checkbox when performing a search with the "),l(p,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),G,a("p",null,[l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will return the complete lineage of the taxonomic lowest common ancestor. See the "),l(p,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),J,a("p",null,[l(n,null,{default:t(()=>[e("names")]),_:1}),e(" is an optional parameter and can either be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When both "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" and "),l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" are set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will return the names of all ranks in the lineage of the taxonomic lowest common ancestor. Setting only "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" will not result in additional information fields being returned. See the "),l(p,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),l(V,{title:"Performance penalty"},{default:t(()=>[a("p",null,[e(" Setting "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),l(g,{id:"response",title:"Response",class:"mt-5","large-title":""},{default:t(()=>[e(" The taxonomic lowest common ancestors associated with the given peptides are returned as a list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects. By default, each object contains the following information fields extracted from the UniProt entry and "),l(i,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxonomy: "),a("ul",F,[a("li",null,[l(n,null,{default:t(()=>[e("peptide")]),_:1}),e(": the peptide that was searched for")]),a("li",null,[l(n,null,{default:t(()=>[e("taxon_id")]),_:1}),e(": the "),l(i,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxon id of the taxonomic lowest common ancestor")]),a("li",null,[l(n,null,{default:t(()=>[e("taxon_name")]),_:1}),e(": the name of the taxonomic lowest common ancestor")]),a("li",null,[l(n,null,{default:t(()=>[e("taxon_rank")]),_:1}),e(": the taxonomic rank of the taxonomic lowest common ancestor")])]),e(" When the "),l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", objects contain additional information about the lineage of the taxonomic lowest common ancestor extracted from the "),l(i,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxonomy. The taxon id of each rank in the lineage is specified using the following information fields: "),a("ul",Z,[a("li",null,[l(n,null,{default:t(()=>[e("superkingdom_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("kingdom_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subkingdom_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superphylum_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("phylum_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subphylum_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superclass_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("class_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subclass_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraclass_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superorder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("order_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("suborder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraorder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("parvorder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superfamily_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("family_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subfamily_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("tribe_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subtribe_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("genus_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subgenus_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_group_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_subgroup_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subspecies_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("varietas_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("forma_id")]),_:1})])]),e(" When both the "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" and "),l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" parameters are set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", objects also contain the names for each rank in the lineage using the following information fields: "),a("ul",$,[a("li",null,[l(n,null,{default:t(()=>[e("superkingdom_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("kingdom_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subkingdom_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superphylum_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("phylum_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subphylum_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superclass_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("class_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subclass_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraclass_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superorder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("order_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("suborder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraorder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("parvorder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superfamily_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("family_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subfamily_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("tribe_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subtribe_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("genus_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subgenus_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_group_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_subgroup_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subspecies_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("varietas_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("forma_name")]),_:1})])])]),_:1}),l(g,{id:"parameters",title:"Parameters",class:"mt-5","large-title":""},{default:t(()=>[l(z,null,{default:t(()=>[ee,a("tbody",null,[te,a("tr",null,[le,a("td",ae,[e(" Equate isoleucine (I) and leucine (L). "),ne,a("div",ie,[e(" Value: Must be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),a("tr",null,[ue,a("td",se,[e(" Return additional information fields if "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(". "),oe,a("div",re,[e(" Value: Must be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),a("tr",null,[de,a("td",pe,[e(" Return names of ranks in the lineage if "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(". "),ce,a("div",me,[e(" Value: Must be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),fe,l(c,{title:"Retrieve the taxonomic lowest common ancestor for a given tryptic peptide",response:v.value},{description:t(()=>[e(" This example retrieves the taxonomic lowest common ancestor for the tryptic peptide "),a("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(". The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2lca -d 'input[]=AIPQLEVARPADAYETAEAYR' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2lca.json?input[]=AIPQLEVARPADAYETAEAYR ")]),_:1},8,["response"]),l(c,{id:"example2",class:"mt-5",title:"Retrieve the taxonomic lowest common ancestor for each of multiple tryptic peptides",response:w.value},{description:t(()=>[e(" This example retrieves the taxonomic lowest common ancestor for both the tryptic peptides "),a("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" and "),a("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". The result is the same as the combination of this search and this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2lca -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'input[]=APVLSDSSCK' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2lca.json?input[]=AIPQLEVARPADAYETAEAYR&input[]=APVLSDSSCK ")]),_:1},8,["response"]),l(c,{class:"mt-5",title:"Retrieve the taxonomic lowest common ancestor for a single tryptic peptide, while equating I and L",response:P.value},{description:t(()=>[e(" This example retrieves the taxonomic lowest common ancestor for the tryptic peptide "),a("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". In searching, isoleucine (I) and leucinge (L) are considered equal. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2lca -d 'input[]=APVISDSSCK' -d 'equate_il=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2lca.json?input[]=APVISDSSCK&equate_il=true ")]),_:1},8,["response"]),l(c,{class:"mt-5",title:"Retrieve the taxonomic lowest common ancestor and lineage for a single tryptic peptide",response:x.value},{description:t(()=>[e(" This example retrieves the taxonomic lowest common ancestor for the tryptic peptide "),a("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" including its complete lineage. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2lca -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2lca.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true ")]),_:1},8,["response"]),l(c,{class:"mt-5",title:"Retrieve the taxonomic lowest common ancestor and lineage names for a single tryptic peptide",response:T.value},{description:t(()=>[e(" This example retrieves the taxonomic lowest common ancestor for the tryptic peptide "),a("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" including its complete lineage with names. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2lca -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' -d 'names=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2lca.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true&names=true ")]),_:1},8,["response"]),l(j,{id:"try",class:"mt-5",response:E.value,command:"pept2lca"},{default:t(()=>[l(B,null,{default:t(()=>[l(y,{cols:"12"},{default:t(()=>[_e,l(K,{modelValue:f.value,"onUpdate:modelValue":o[0]||(o[0]=r=>f.value=r),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),l(y,{cols:"12",class:"dark-label"},{default:t(()=>[he,l(b,{modelValue:h.value,"onUpdate:modelValue":o[1]||(o[1]=r=>h.value=r),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),l(b,{modelValue:_.value,"onUpdate:modelValue":o[2]||(o[2]=r=>_.value=r),color:"primary",inset:"",label:"equate_il",density:"compact","hide-details":""},null,8,["modelValue"]),l(b,{modelValue:A.value,"onUpdate:modelValue":o[3]||(o[3]=r=>A.value=r),color:"primary",inset:"",label:"names",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),l(y,{cols:"12"},{default:t(()=>[l(k,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:R},{default:t(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});const Ce=O(Ae,[["__scopeId","data-v-d3c481a4"]]);export{Ce as default};
