import{H as i}from"./HeaderBodyCard-f3b47b61.js";import{R as d}from"./ResourceLink-82ddf6bf.js";import{B as u,S as a}from"./Boxed-1ca540a2.js";import{I as r}from"./InlineCode-b941903d.js";import{I as o}from"./Initialism-25eec5f3.js";import{_ as A}from"./ImageCaptionCard.vue_vue_type_script_setup_true_lang-dcd0da81.js";import{d as f,o as b,c as p,w as t,l as C,g as e,b as l,a as s,t as G,u as m,e as T,f as R,F as g,p as S,q as P}from"./index-fa2d734a.js";import{_ as L}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-4d112d66.js";const w="/unipept/assets/casestudy-umgap-advanced-f473612a.png",n=_=>(S("data-v-c5056e72"),_=_(),P(),_),x=n(()=>e("h1",{class:"font-weight-light"}," Case Study: configuring a metagenomics pipeline ",-1)),v={class:"font-weight-light"},I=n(()=>e("br",null,null,-1)),D=n(()=>e("br",null,null,-1)),V=n(()=>e("br",null,null,-1)),y=n(()=>e("br",null,null,-1)),H=n(()=>e("br",null,null,-1)),E=n(()=>e("br",null,null,-1)),M=n(()=>e("br",null,null,-1)),F=n(()=>e("br",null,null,-1)),N=n(()=>e("br",null,null,-1)),Q=n(()=>e("br",null,null,-1)),k=n(()=>e("br",null,null,-1)),q=n(()=>e("br",null,null,-1)),K=n(()=>e("p",null," Using gene prediction limits our tool to the coding regions of the given DNA reads. This limit caps the sensitivity of our predictions, as we can offer no prediction for a read from a non-coding region. On the other hand, coding regions are more conserved and the mutations that do occur often do not change the resulting amino acid. ",-1)),W=n(()=>e("br",null,null,-1)),U=n(()=>e("br",null,null,-1)),B=n(()=>e("br",null,null,-1)),Y=n(()=>e("br",null,null,-1)),$=n(()=>e("br",null,null,-1)),z=n(()=>e("br",null,null,-1)),j=n(()=>e("br",null,null,-1)),J=n(()=>e("br",null,null,-1)),O=n(()=>e("br",null,null,-1)),X=n(()=>e("br",null,null,-1)),Z=n(()=>e("br",null,null,-1)),ll=n(()=>e("br",null,null,-1)),el=n(()=>e("br",null,null,-1)),nl=n(()=>e("br",null,null,-1)),tl=n(()=>e("br",null,null,-1)),sl=n(()=>e("br",null,null,-1)),ol=n(()=>e("br",null,null,-1)),al=n(()=>e("br",null,null,-1)),ul=n(()=>e("br",null,null,-1)),rl=n(()=>e("br",null,null,-1)),il=n(()=>e("br",null,null,-1)),dl=n(()=>e("br",null,null,-1)),_l=n(()=>e("br",null,null,-1)),cl=n(()=>e("br",null,null,-1)),hl=n(()=>e("br",null,null,-1)),bl=n(()=>e("br",null,null,-1)),Gl=n(()=>e("br",null,null,-1)),Al=n(()=>e("br",null,null,-1)),fl=n(()=>e("br",null,null,-1)),pl=n(()=>e("br",null,null,-1)),Cl=n(()=>e("br",null,null,-1)),ml=n(()=>e("br",null,null,-1)),Tl=n(()=>e("br",null,null,-1)),Rl=n(()=>e("br",null,null,-1)),gl=n(()=>e("br",null,null,-1)),Sl=n(()=>e("br",null,null,-1)),Pl=n(()=>e("br",null,null,-1)),Ll=n(()=>e("br",null,null,-1)),wl=n(()=>e("br",null,null,-1)),xl=n(()=>e("br",null,null,-1)),vl=n(()=>e("br",null,null,-1)),Il=n(()=>e("br",null,null,-1)),Dl=n(()=>e("br",null,null,-1)),Vl=n(()=>e("br",null,null,-1)),yl=n(()=>e("br",null,null,-1)),Hl=n(()=>e("br",null,null,-1)),El=n(()=>e("br",null,null,-1)),Ml=n(()=>e("br",null,null,-1)),Fl=n(()=>e("br",null,null,-1)),Nl=n(()=>e("br",null,null,-1)),Ql=n(()=>e("br",null,null,-1)),kl=n(()=>e("br",null,null,-1)),ql=n(()=>e("br",null,null,-1)),Kl=n(()=>e("br",null,null,-1)),Wl=n(()=>e("br",null,null,-1)),Ul=n(()=>e("br",null,null,-1)),Bl=n(()=>e("br",null,null,-1)),Yl=n(()=>e("br",null,null,-1)),$l=n(()=>e("br",null,null,-1)),zl=n(()=>e("br",null,null,-1)),jl=n(()=>e("br",null,null,-1)),Jl=n(()=>e("br",null,null,-1)),Ol=n(()=>e("br",null,null,-1)),Xl=n(()=>e("br",null,null,-1)),Zl=n(()=>e("br",null,null,-1)),le=n(()=>e("br",null,null,-1)),ee=n(()=>e("br",null,null,-1)),ne=n(()=>e("br",null,null,-1)),te=n(()=>e("br",null,null,-1)),se=n(()=>e("br",null,null,-1)),oe=n(()=>e("br",null,null,-1)),ae=n(()=>e("br",null,null,-1)),ue=n(()=>e("br",null,null,-1)),re=n(()=>e("br",null,null,-1)),ie=n(()=>e("br",null,null,-1)),de=n(()=>e("br",null,null,-1)),_e=n(()=>e("br",null,null,-1)),ce=n(()=>e("br",null,null,-1)),he=n(()=>e("br",null,null,-1)),be=n(()=>e("br",null,null,-1)),Ge=n(()=>e("br",null,null,-1)),Ae=n(()=>e("br",null,null,-1)),fe=n(()=>e("br",null,null,-1)),pe=n(()=>e("br",null,null,-1)),Ce=n(()=>e("br",null,null,-1)),me=n(()=>e("br",null,null,-1)),Te=n(()=>e("br",null,null,-1)),Re=n(()=>e("br",null,null,-1)),ge=n(()=>e("br",null,null,-1)),Se=n(()=>e("br",null,null,-1)),Pe=n(()=>e("br",null,null,-1)),Le=n(()=>e("br",null,null,-1)),we=n(()=>e("br",null,null,-1)),xe=n(()=>e("br",null,null,-1)),ve=n(()=>e("br",null,null,-1)),Ie=n(()=>e("br",null,null,-1)),De=n(()=>e("br",null,null,-1)),Ve=n(()=>e("br",null,null,-1)),ye=n(()=>e("br",null,null,-1)),He=n(()=>e("br",null,null,-1)),Ee=n(()=>e("br",null,null,-1)),Me=n(()=>e("br",null,null,-1)),Fe=n(()=>e("br",null,null,-1)),Ne=n(()=>e("br",null,null,-1)),Qe=n(()=>e("br",null,null,-1)),ke=n(()=>e("br",null,null,-1)),qe=n(()=>e("br",null,null,-1)),Ke=n(()=>e("br",null,null,-1)),We=n(()=>e("br",null,null,-1)),Ue=n(()=>e("br",null,null,-1)),Be=n(()=>e("br",null,null,-1)),Ye=n(()=>e("br",null,null,-1)),$e=n(()=>e("br",null,null,-1)),ze=n(()=>e("br",null,null,-1)),je=n(()=>e("br",null,null,-1)),Je=n(()=>e("br",null,null,-1)),Oe=n(()=>e("br",null,null,-1)),Xe=n(()=>e("br",null,null,-1)),Ze=n(()=>e("br",null,null,-1)),ln=n(()=>e("br",null,null,-1)),en=n(()=>e("br",null,null,-1)),nn=n(()=>e("br",null,null,-1)),tn=n(()=>e("br",null,null,-1)),sn=n(()=>e("br",null,null,-1)),on=n(()=>e("br",null,null,-1)),an=n(()=>e("br",null,null,-1)),un=n(()=>e("br",null,null,-1)),rn=n(()=>e("br",null,null,-1)),dn=n(()=>e("br",null,null,-1)),_n=n(()=>e("br",null,null,-1)),cn=n(()=>e("br",null,null,-1)),hn=n(()=>e("br",null,null,-1)),bn=n(()=>e("br",null,null,-1)),Gn=n(()=>e("br",null,null,-1)),An=n(()=>e("br",null,null,-1)),fn=n(()=>e("br",null,null,-1)),pn=n(()=>e("br",null,null,-1)),Cn=n(()=>e("br",null,null,-1)),mn=n(()=>e("br",null,null,-1)),Tn=n(()=>e("br",null,null,-1)),Rn=n(()=>e("br",null,null,-1)),gn=n(()=>e("br",null,null,-1)),Sn=n(()=>e("br",null,null,-1)),Pn=n(()=>e("br",null,null,-1)),Ln=n(()=>e("br",null,null,-1)),wn=n(()=>e("p",null," Especially when running the pipeline with all six frames, a lot of the translations are invalid since we expect only one of the reading frames, rarely more, to yield a valid protein. The Seed-Extend step in the pipeline filters out most random hits by selecting only 9-mer hits which are spatially close to other hits. ",-1)),xn=n(()=>e("br",null,null,-1)),vn=n(()=>e("br",null,null,-1)),In=n(()=>e("br",null,null,-1)),Dn=n(()=>e("br",null,null,-1)),Vn=n(()=>e("br",null,null,-1)),yn=n(()=>e("br",null,null,-1)),Hn=n(()=>e("br",null,null,-1)),En=n(()=>e("br",null,null,-1)),Mn=n(()=>e("br",null,null,-1)),Fn=n(()=>e("br",null,null,-1)),Nn=n(()=>e("br",null,null,-1)),Qn=n(()=>e("br",null,null,-1)),kn=n(()=>e("br",null,null,-1)),qn=n(()=>e("br",null,null,-1)),Kn=n(()=>e("br",null,null,-1)),Wn=n(()=>e("br",null,null,-1)),Un=n(()=>e("br",null,null,-1)),Bn=n(()=>e("br",null,null,-1)),Yn=n(()=>e("br",null,null,-1)),$n=n(()=>e("br",null,null,-1)),zn=n(()=>e("br",null,null,-1)),jn=n(()=>e("br",null,null,-1)),Jn=n(()=>e("br",null,null,-1)),On=n(()=>e("br",null,null,-1)),Xn=n(()=>e("br",null,null,-1)),Zn=n(()=>e("br",null,null,-1)),lt=n(()=>e("br",null,null,-1)),et=n(()=>e("br",null,null,-1)),nt=n(()=>e("br",null,null,-1)),tt=n(()=>e("br",null,null,-1)),st=n(()=>e("br",null,null,-1)),ot=n(()=>e("br",null,null,-1)),at=n(()=>e("br",null,null,-1)),ut=n(()=>e("br",null,null,-1)),rt=n(()=>e("br",null,null,-1)),it=n(()=>e("br",null,null,-1)),dt=n(()=>e("br",null,null,-1)),_t=n(()=>e("br",null,null,-1)),ct=n(()=>e("br",null,null,-1)),ht=n(()=>e("br",null,null,-1)),bt=n(()=>e("br",null,null,-1)),Gt=n(()=>e("br",null,null,-1)),At=n(()=>e("br",null,null,-1)),ft=n(()=>e("br",null,null,-1)),pt=n(()=>e("br",null,null,-1)),Ct=n(()=>e("br",null,null,-1)),mt=n(()=>e("br",null,null,-1)),Tt=n(()=>e("br",null,null,-1)),Rt=n(()=>e("br",null,null,-1)),gt=n(()=>e("br",null,null,-1)),St=n(()=>e("br",null,null,-1)),Pt=n(()=>e("br",null,null,-1)),Lt=n(()=>e("br",null,null,-1)),wt=n(()=>e("br",null,null,-1)),xt=n(()=>e("br",null,null,-1)),vt=n(()=>e("br",null,null,-1)),It=n(()=>e("br",null,null,-1)),Dt=n(()=>e("br",null,null,-1)),Vt=n(()=>e("br",null,null,-1)),yt=n(()=>e("br",null,null,-1)),Ht=n(()=>e("br",null,null,-1)),Et=n(()=>e("br",null,null,-1)),Mt=n(()=>e("br",null,null,-1)),Ft=n(()=>e("br",null,null,-1)),Nt=n(()=>e("br",null,null,-1)),Qt=n(()=>e("br",null,null,-1)),kt=n(()=>e("br",null,null,-1)),qt=n(()=>e("br",null,null,-1)),Kt=n(()=>e("br",null,null,-1)),Wt=n(()=>e("br",null,null,-1)),Ut=n(()=>e("br",null,null,-1)),Bt=n(()=>e("p",null," Note: the real output would contain newlines between taxa, which have been replaced here by spaces for readability. ",-1)),Yt=n(()=>e("br",null,null,-1)),$t=n(()=>e("br",null,null,-1)),zt=n(()=>e("br",null,null,-1)),jt=n(()=>e("br",null,null,-1)),Jt=n(()=>e("br",null,null,-1)),Ot=n(()=>e("br",null,null,-1)),Xt=n(()=>e("br",null,null,-1)),Zt=n(()=>e("br",null,null,-1)),ls=n(()=>e("br",null,null,-1)),es=n(()=>e("br",null,null,-1)),ns=n(()=>e("br",null,null,-1)),ts=n(()=>e("p",null," This command processes the complete Metabenchmark A1 dataset containing 116 million paired-end reads in a VM (8 cores, 200GB RAM) on our computational server (16 Intel Xeon CPU E5-2650 v2 at 2.60GHz, 20*16GB RDIMM x4 Data Width at 1866MHz, with the 9-mer index loaded in RAM) in 4h22, that is 1840 (paired-end) reads per second. Using FragGeneScan++ speeds this up to 10100 reads per second. ",-1)),ss=n(()=>e("h2",{class:"font-weight-light mt-5"}," References ",-1)),os=f({__name:"MetagenomicsAdvancedPage",setup(_){const c={wood:{full:"Wood, D. E., & Salzberg, S. L. (2014). Kraken: ultrafast metagenomic sequence classification using exact alignments. Genome biology, 15(3), R46.",short:""},lindgreen:{full:"Lindgreen, S., Adair, K. L., & Gardner, P. P. (2016). An evaluation of the accuracy and speed of metagenome analysis tools. Scientific reports, 6, 19233.",short:"Lindgreen et al. (2016)"},rho:{full:"Rho, M., Tang, H., & Ye, Y. (2010). FragGeneScan: predicting genes in short and error-prone reads. Nucleic acids research, 38(20), e191-e191.",short:""},kim:{full:"Kim, D., Hahn, A. S., Wu, S. J., Hanson, N. W., Konwar, K. M., & Hallam, S. J. (2015, August). FragGeneScan-Plus for scalable high-throughput short-read open reading frame prediction. Computational Intelligence in Bioinformatics and Computational Biology (CIBCB), 2015 IEEE Conference on (pp. 1-8), IEEE.",short:""},uniprot:{full:"UniProt Consortium. (2014). UniProt: a hub for protein information. Nucleic acids research, 43(D1), D204-D212.",short:""},federhen:{full:"Federhen, S. (2011). The NCBI taxonomy database. Nucleic acids research, 40(D1), D136-D143.",short:""}};return(as,us)=>(b(),p(C,null,{default:t(()=>[x,e("h3",v,[l(" This case study shows how to use "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" for the taxonomic analysis of a metagenomics dataset. ")]),s(i,{class:"mt-5",title:"Introduction","large-title":""},{default:t(()=>[e("p",null,[l(" The Unipept Metagenomics Analysis Pipeline ("),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(") is a tool for mapping (short) metagenomics reads to taxa, rivalling state of the art alternatives such as Kraken (2014) with the additional benefit of species level identification. "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" achieves this by transforming the mapping task into a metaproteomics problem by using various alternative gene predictors on the metagenomics reads and processing the resulting data with the existing Unipept Metaproteomics Analysis Pipeline. Each step in "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" is highly configurable. ")])]),_:1}),s(i,{class:"mt-5",title:"Preprocessing","large-title":""},{default:t(()=>[e("p",null,[l(" Throughout this overview of "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(", all steps will have examples to demonstrate the exact usage. For this, we have sampled 100 paired-end DNA reads from a dataset generated by "+G(c.lindgreen.short)+" for their metabenchmark. As this dataset contains paired-end reads in ",1),s(o,null,{default:t(()=>[l("FASTQ")]),_:1}),l(" format, and "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" operates on "),s(o,null,{default:t(()=>[l("FASTA")]),_:1}),l(" data, we perform a first preprocessing step to convert the "),s(o,null,{default:t(()=>[l("FASTQ")]),_:1}),l(" into "),s(o,null,{default:t(()=>[l("FASTA")]),_:1}),l(" files. You can download these files to get the same results: "),s(d,{to:"/A1.fq",target:"_blank"},{default:t(()=>[l("A1.fq")]),_:1}),l(" and "),s(d,{to:"/A2.fq",target:"_blank"},{default:t(()=>[l("A2.fq")]),_:1}),l(". ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" umgap fastq2fasta A1.fq A2.fq | tee preprocessed.fa "),I,l(">read1/1 "),D,l("ATCGCGCACGCGGCCGATGCCCCAGAAGAGATTGACAGCGGTGGGGCGGGCGGCGGCGAGGTGGTCGCAGATCTCGGCGACCTCTGCGTTGAGGGTCGGG "),V,l(">read1/2 "),y,l("AAGATGGCGACTGGATGATGATCGCGCGGCAGGCCACCATCTACGATCCCGCAGTGAAGCATTACTAACCATGATGCGCAACGACTCGCTGTCAGAGCTA "),H,l(">read2/1 "),E,l("AGATTGCTGGTGCGGGTGCTCTGCCGGGCTTCTTCATCTCGGACCGCGCATCCGATGCGCACACGGCACAGTAGGTATGCGGTGAGAGCACCTCGCTTTT "),M,l(">read2/2 "),F,l("CGCAATCTTGCGGCGCACCGCGATCAAATCGGGATAGTCCGGTGTGTAACGCGTGCTCAGGTCATCTGCCCGTACCCGCAATACATTCAACTGTGTTTTA "),N,l(">read3/1 "),Q,l("CCCTCAAGCCCGATCGAACTTTCCTACTGCCCGACCTCAGCGCGGAGCATTACCGAATCGTCGTCAACAATCTCCCCGATGGCTTCTATGTGAACTCCAT "),k,l(">read3/2 "),q,l("CAAAATGGAGTGGGCGCTACTGCTCCGTGAGCAGGGTCAGTTGGAGGGATTGGGGCGTGCGCTCGGGGATGCTAATGGCGGTGCCCCTGGATTCCTGAGA ")]),_:1}),e("p",null,[l(" This command will interleave the given "),s(o,null,{default:t(()=>[l("FASTQ")]),_:1}),l(" files and output a "),s(o,null,{default:t(()=>[l("FASTA")]),_:1}),l(" stream, in which the paired-ends alternate each other. ")])]),_:1}),s(i,{class:"mt-5",title:"Protein translation","large-title":""},{default:t(()=>[e("p",null,[l(" To convert the metagenomics reads into a metaproteomics problem, we need to translate the "),s(o,null,{default:t(()=>[l("DNA")]),_:1}),l(" fragments into protein fragments. While any gene prediction tool can be used, "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" was tested with FragGeneScan (2010) and FragGeneScan++, our in-house improved version of FragGeneScanPlus (2015), a predictor using Hidden Markov Models. Alternatively, you can also try all possible translations and use the built-in six-frame translation tool. ")]),K,e("p",null,[l(" For more information about the available options for the gene predictors, the FragGeneScan and FragGeneScan++ commands, we refer to the "),s(d,{to:"http://omics.informatics.indiana.edu/FragGeneScan/"},{default:t(()=>[l("FragGeneScan")]),_:1}),l(" and "),s(d,{to:"https://github.com/unipept/FragGeneScanPlusPlus"},{default:t(()=>[l("FragGeneScan++")]),_:1}),l(" documentation. Here, it suffices to say that the commands below will write the predicted genes in "),s(o,null,{default:t(()=>[l("FASTA")]),_:1}),l(" format to a file called `predicted-genes.faa`. ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" FGS -s preprocessed.fa -o predicted-genes -w0 -t illumina_10 -p 16 > /dev/null "),W,s(a,null,{default:t(()=>[l("$")]),_:1}),l(" rm predicted-genes.fnn predicted-genes.out # we don't use these files ")]),_:1}),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" FGSpp -s stdin -o stdout -w 0 -r train -t illumina_10 -p 16 -m 3000 < preprocessed.fa | tee predicted-genes.faa ")]),_:1}),e("p",null,[l(" With our alternative six-frame translation option, we choose to translate all ("),s(r,null,{default:t(()=>[l("-a")]),_:1}),l(") frames using the standard translation table. ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" umgap translate -a < preprocessed.fa | tee predicted-genes.faa "),U,l(">read1/1|1 "),B,l("IAHAADAPEEIDSGGAGGGEVVADLGDLCVEGR "),Y,l(">read1/1|2 "),$,l("SRTRPMPQKRLTAVGRAAARWSQISATSALRVG "),z,l(">read1/1|3 "),j,l("RARGRCPRRD*QRWGGRRRGGRRSRRPLR*GS "),J,l(">read1/1|1R "),O,l("PDPQRRGRRDLRPPRRRPPHRCQSLLGHRPRAR "),X,l(">read1/1|2R "),Z,l("PTLNAEVAEICDHLAAARPTAVNLFWGIGRVRD "),ll,l(">read1/1|3R "),el,l("RPSTQRSPRSATTSPPPAPPLSISSGASAACA "),nl,l(">read1/2|1 "),tl,l("KMATG**SRGRPPSTIPQ*SITNHDAQRLAVRA "),sl,l(">read1/2|2 "),ol,l("RWRLDDDRAAGHHLRSRSEALLTMMRNDSLSEL "),al,l(">read1/2|3 "),ul,l("DGDWMMIARQATIYDPAVKHY*P*CATTRCQS "),rl,l(">read1/2|1R "),il,l("*L*QRVVAHHG**CFTAGS*MVACRAIIIQSPS "),dl,l(">read1/2|2R "),_l,l("SSDSESLRIMVSNASLRDRRWWPAARSSSSRHL "),cl,l(">read1/2|3R "),hl,l("ALTASRCASWLVMLHCGIVDGGLPRDHHPVAI "),bl,l(">read2/1|1 "),Gl,l("RLLVRVLCRASSSRTAHPMRTRHSRYAVRAPRF "),Al,l(">read2/1|2 "),fl,l("DCWCGCSAGLLHLGPRIRCAHGTVGMR*EHLAF "),pl,l(">read2/1|3 "),Cl,l("IAGAGALPGFFISDRASDAHTAQ*VCGESTSL "),ml,l(">read2/1|1R "),Tl,l("KSEVLSPHTYCAVCASDARSEMKKPGRAPAPAI "),Rl,l(">read2/1|2R "),gl,l("KARCSHRIPTVPCAHRMRGPR*RSPAEHPHQQS "),Sl,l(">read2/1|3R "),Pl,l("KRGALTAYLLCRVRIGCAVRDEEARQSTRTSN "),Ll,l(">read2/2|1 "),wl,l("RNLAAHRDQIGIVRCVTRAQVICPYPQYIQLCF "),xl,l(">read2/2|2 "),vl,l("AILRRTAIKSG*SGV*RVLRSSARTRNTFNCVL "),Il,l(">read2/2|3 "),Dl,l("QSCGAPRSNRDSPVCNACSGHLPVPAIHSTVF "),Vl,l(">read2/2|1R "),yl,l("*NTVECIAGTGR*PEHALHTGLSRFDRGAPQDC "),Hl,l(">read2/2|2R "),El,l("KTQLNVLRVRADDLSTRYTPDYPDLIAVRRKIA "),Ml,l(">read2/2|3R "),Fl,l("KHS*MYCGYGQMT*ARVTHRTIPI*SRCAARL "),Nl,l(">read3/1|1 "),Ql,l("PSSPIELSYCPTSARSITESSSTISPMASM*TP "),kl,l(">read3/1|2 "),ql,l("PQARSNFPTARPQRGALPNRRQQSPRWLLCELH "),Kl,l(">read3/1|3 "),Wl,l("LKPDRTFLLPDLSAEHYRIVVNNLPDGFYVNS "),Ul,l(">read3/1|1R "),Bl,l("MEFT*KPSGRLLTTIR*CSALRSGSRKVRSGLR "),Yl,l(">read3/1|2R "),$l,l("WSSHRSHRGDC*RRFGNAPR*GRAVGKFDRA*G "),zl,l(">read3/1|3R "),jl,l("GVHIEAIGEIVDDDSVMLRAEVGQ*ESSIGLE "),Jl,l(">read3/2|1 "),Ol,l("QNGVGATAP*AGSVGGIGACARGC*WRCPWIPE "),Xl,l(">read3/2|2 "),Zl,l("KMEWALLLREQGQLEGLGRALGDANGGAPGFLR "),le,l(">read3/2|3 "),ee,l("KWSGRYCSVSRVSWRDWGVRSGMLMAVPLDS* "),ne,l(">read3/2|1R "),te,l("SQESRGTAISIPERTPQSLQLTLLTEQ*RPLHF "),se,l(">read3/2|2R "),oe,l("LRNPGAPPLASPSARPNPSN*PCSRSSSAHSIL "),ae,l(">read3/2|3R "),ue,l("SGIQGHRH*HPRAHAPIPPTDPAHGAVAPTPF ")]),_:1})]),_:1}),s(i,{class:"mt-5",title:"Peptide profiling"},{default:t(()=>[e("p",null,[s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" uses exact substring matching to identify reads. The next step of the pipeline fragments each amino acid sequence into 9-mers. The k-mers of a string are all possible substrings of length k. For example, the 4-mers of the string "),s(o,null,{default:t(()=>[l("ABCDEFG")]),_:1}),l(" are "),s(o,null,{default:t(()=>[l("ABCD")]),_:1}),l(", "),s(o,null,{default:t(()=>[l("BCDE")]),_:1}),l(", "),s(o,null,{default:t(()=>[l("CDEF")]),_:1}),l(" and "),s(o,null,{default:t(()=>[l("DEFG")]),_:1}),l(". After constructing all possible 9-mers, they are matched against our index. This index maps each 9-mer encountered in the UniProt's protein knowledgebase (2014) to the lowest common ancestor ("),s(o,null,{default:t(()=>[l("LCA")]),_:1}),l(") of all the organisms it occured in. The "),s(o,null,{default:t(()=>[l("LCA")]),_:1}),l(" of a set of taxa is equal to the taxon of the most specific rank in the "),s(o,null,{default:t(()=>[l("NCBI")]),_:1}),l(" taxonomy (2011) that is either a descendant or an ancestor of all taxa in that set. ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" umgap prot2kmer2lca -o -k9 9-mer.index < predicted-genes.faa | tee found-kmers.fa "),re,l(">read1/1|1 "),ie,l("0 0 0 0 0 0 0 0 0 0 35725 2759 1 1 1 2 515393 201174 0 1 0 0 0 379 0 "),de,l(">read1/1|2 "),_e,l("0 0 0 0 0 0 0 0 0 1185650 1185650 140110 0 0 0 0 0 0 0 0 0 36842 0 1 162425 "),ce,l(">read1/1|3 "),he,l("0 0 0 0 0 0 0 0 0 0 0 1773 47855 4530 1 1 1 1 1 0 35708 0 0 0 "),be,l(">read1/1|1R "),Ge,l("0 0 0 0 2235 0 0 0 0 40674 1 1 2759 0 0 0 0 0 0 0 0 0 0 0 88724 "),Ae,l(">read1/1|2R "),fe,l("1 940557 1 940615 940615 940615 940615 940615 0 0 0 0 56 2 1 1 1 1 2 2 940615 940615 940615 940615 940615 "),pe,l(">read1/1|3R "),Ce,l("0 0 0 0 1036719 2 2759 0 2 1 1 1 2759 1 1 3916 3916 1760 0 237 1 2759 1 0 "),me,l(">read1/2|1 "),Te,l("0 0 0 0 0 0 0 5627 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 "),Re,l(">read1/2|2 "),ge,l("0 52226 53355 1760 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 44471 "),Se,l(">read1/2|3 "),Pe,l("940615 940615 940615 940615 940615 204434 204434 204434 204434 2 204434 204434 204434 0 0 0 0 0 0 0 0 0 0 0 "),Le,l(">read1/2|1R "),we,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),xe,l(">read1/2|2R "),ve,l("1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 4751 35708 "),Ie,l(">read1/2|3R "),De,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),Ve,l(">read2/1|1 "),ye,l("0 1813 546364 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),He,l(">read2/1|2 "),Ee,l("0 68786 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),Me,l(">read2/1|3 "),Fe,l("2 392734 392734 392734 392734 0 0 0 0 0 0 0 0 0 392734 0 0 0 0 0 0 0 0 0 "),Ne,l(">read2/1|1R "),Qe,l("0 0 0 0 0 0 0 0 36740 0 0 0 0 0 0 0 0 0 0 0 0 0 379 379 0 "),ke,l(">read2/1|2R "),qe,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),Ke,l(">read2/1|3R "),We,l("0 0 0 0 393310 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),Ue,l(">read2/2|1 "),Be,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),Ye,l(">read2/2|2 "),$e,l("1534 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),ze,l(">read2/2|3 "),je,l("0 0 0 0 0 0 0 0 0 0 0 0 1370023 0 0 0 0 0 0 0 0 0 0 0 "),Je,l(">read2/2|1R "),Oe,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 488447 0 0 0 0 0 0 0 "),Xe,l(">read2/2|2R "),Ze,l("0 0 0 0 0 0 33882 4930 4930 0 392734 1 392734 392734 392734 392734 392734 392734 392734 392734 392733 392733 392733 392733 392734 "),ln,l(">read2/2|3R "),en,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),nn,l(">read3/1|1 "),tn,l("0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1754192 0 6282 0 7164 0 0 0 0 0 "),sn,l(">read3/1|2 "),on,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),an,l(">read3/1|3 "),un,l("332163 332163 332163 2 1 332163 2 332163 332163 332163 332163 332163 1 332163 332163 332163 332163 332163 332163 332163 332163 332163 0 0 "),rn,l(">read3/1|1R "),dn,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 322865 7868 0 0 0 0 0 0 "),_n,l(">read3/1|2R "),cn,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),hn,l(">read3/1|3R "),bn,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 "),Gn,l(">read3/2|1 "),An,l("0 0 0 0 0 0 0 0 0 0 632569 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "),fn,l(">read3/2|2 "),pn,l("0 0 0 8839 0 0 40754 0 0 0 0 323415 0 286 1 1760 0 0 0 0 0 0 0 0 0 "),Cn,l(">read3/2|3 "),mn,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28216 0 0 0 0 0 0 0 "),Tn,l(">read3/2|1R "),Rn,l("332163 2 2 332163 332163 332163 332163 332163 332163 332163 1 332163 332163 332163 2 2 1 332163 332163 0 0 0 0 0 0 "),gn,l(">read3/2|2R "),Sn,l("67819 0 0 0 5855 1 1 2 519963 5206 0 1245748 0 0 0 0 0 0 0 0 0 101127 0 0 0 "),Pn,l(">read3/2|3R "),Ln,l("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13687 0 0 0 ")]),_:1}),e("p",null,[l(" This command will look up each 9-mer in the input data and output the associated taxon if any is found. With the "),s(r,null,{default:t(()=>[l("-o")]),_:1}),l(" or "),s(r,null,{default:t(()=>[l("--one-on-one")]),_:1}),l(' flag, the unrecognized 9-mers will be included as a "0" taxon, the use of which will be clarified in the next step. Note: the real output would contain newlines between taxa, which have been replaced here by spaces for readability. ')])]),_:1}),s(i,{class:"mt-5",title:"(Optional) Filtering","large-title":""},{default:t(()=>[wn,s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" umgap seedextend < found-kmers.fa | tee selected-seeds.fa "),xn,l(">read1/1|1 "),vn,l("35725 2759 1 1 1 2 515393 201174 "),In,l(">read1/1|2 "),Dn,l("1185650 1185650 140110 "),Vn,l(">read1/1|3 "),yn,l("1773 47855 4530 1 1 1 1 1 "),Hn,l(">read1/1|1R "),En,l("40674 1 1 2759 "),Mn,l(">read1/1|2R "),Fn,l("1 940557 1 940615 940615 940615 940615 940615 56 2 1 1 1 1 2 2 940615 940615 940615 940615 940615 "),Nn,l(">read1/1|3R "),Qn,l("2 1 1 1 2759 1 1 3916 3916 1760 "),kn,l(">read1/2|1 "),qn,Kn,l(">read1/2|2 "),Wn,Un,l(">read1/2|3 "),Bn,l("940615 940615 940615 940615 940615 204434 204434 204434 204434 2 204434 204434 204434 "),Yn,l(">read1/2|1R "),$n,zn,l(">read1/2|2R "),jn,Jn,l(">read1/2|3R "),On,Xn,l(">read2/1|1 "),Zn,lt,l(">read2/1|2 "),et,nt,l(">read2/1|3 "),tt,l("2 392734 392734 392734 392734 "),st,l(">read2/1|1R "),ot,l("379 379 "),at,l(">read2/1|2R "),ut,rt,l(">read2/1|3R "),it,dt,l(">read2/2|1 "),_t,ct,l(">read2/2|2 "),ht,bt,l(">read2/2|3 "),Gt,At,l(">read2/2|1R "),ft,pt,l(">read2/2|2R "),Ct,l("33882 4930 4930 392734 1 392734 392734 392734 392734 392734 392734 392734 392734 392733 392733 392733 392733 392734 "),mt,l(">read2/2|3R "),Tt,Rt,l(">read3/1|1 "),gt,St,l(">read3/1|2 "),Pt,Lt,l(">read3/1|3 "),wt,l("332163 332163 332163 2 1 332163 2 332163 332163 332163 332163 332163 1 332163 332163 332163 332163 332163 332163 332163 332163 332163 "),xt,l(">read3/1|1R "),vt,It,l(">read3/1|2R "),Dt,Vt,l(">read3/1|3R "),yt,Ht,l(">read3/2|1 "),Et,Mt,l(">read3/2|2 "),Ft,Nt,l(">read3/2|3 "),Qt,kt,l(">read3/2|1R "),qt,l("332163 2 2 332163 332163 332163 332163 332163 332163 332163 1 332163 332163 332163 2 2 1 332163 332163 "),Kt,l(">read3/2|2R "),Wt,l("5855 1 1 2 519963 5206 "),Ut,l(">read3/2|3R ")]),_:1}),Bt,s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" mv selected-seeds.fa found-kmers.fa # optional step, same format ")]),_:1}),e("p",null,[l(" The Seed-Extend algorithm requires spatial information which is provided by supplying the "),s(r,null,{default:t(()=>[l("-o")]),_:1}),l(" flag to the previous command. The "),s(r,null,{default:t(()=>[l("taxons.tsv")]),_:1}),l(" is a file describing the "),s(o,null,{default:t(()=>[l("NCBI")]),_:1}),l(" taxonomic tree. ")])]),_:1}),s(i,{class:"mt-5",title:"Aggregation","large-title":""},{default:t(()=>[e("p",null,[l(" At this step of the pipeline, we have a list of taxon identifiers per protein, one protein per reading frame, 6 reading frames per paired-end and 2 paired-ends per metagenomics read. To get a single taxon identification per read, we need to aggregate these 12 lists. "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" offers 3 alternative aggregation strategies with varying speciality. ")]),e("ul",null,[e("li",null,[l(" Unipept's lowest common ancestor strategy ("),s(o,null,{default:t(()=>[l("LCA")]),_:1}),l("*), where the consensus taxon is, as before, the taxon of most specific rank which is either descendant or ancestor of every given taxon. ")]),e("li",null,[l(" Kraken's maximum root-to-leaf path ("),s(o,null,{default:t(()=>[l("MRTL")]),_:1}),l("), where the consensus taxon is the taxon in the given list which has the most ancestors in the given list. ")]),e("li",null,[l(" A newly developed hybrid strategy, which combines "),s(o,null,{default:t(()=>[l("LCA")]),_:1}),l("* and "),s(o,null,{default:t(()=>[l("MRTL")]),_:1}),l(" based on a given scaling factor (default 0.25). The hybrid method aims to ignore some outliers without compromising generality. This strategy is the default and will therefore be used below. ")])]),e("p",null,[l(" Before aggregating the results per read, we remove the markers from the headers with "),s(r,null,{default:t(()=>[l("sed")]),_:1}),l(" and combine the results of each reading frame and paired-end with "),s(r,null,{default:t(()=>[l("uniq")]),_:1}),l(". ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" sed '/^>/s_/.*__' found-kmers.fa | umgap uniq | umgap taxa2agg taxons.tsv | tee classification.fa "),Yt,l(">read1 "),$t,l("940615 "),zt,l(">read2 "),jt,l("392734 "),Jt,l(">read3 "),Ot,l("332163 ")]),_:1})]),_:1}),s(i,{class:"mt-5",title:"Visualisation","large-title":""},{default:t(()=>[e("p",null,[l(" Now that we have the results of our analysis, we'd like to visualise them. A frequency table and interactive visualisations are available as the "),s(r,null,{default:t(()=>[l("taxa2freq")]),_:1}),l(" and "),s(r,null,{default:t(()=>[l("taxa2tree")]),_:1}),l(" commands. The first shows the number of reads mapping to each taxon in "),s(o,null,{default:t(()=>[l("CSV")]),_:1}),l(" format, easily imported in other programs. ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" umgap taxa2freq -r species taxons.tsv < classification.fa | tee report.csv "),Xt,l("taxon id,taxon name,stdin "),Zt,l("332163,Candidatus Solibacter usitatus,1 "),ls,l("392734,Terriglobus roseus,1 "),es,l("940615,Granulicella tundricola,1 ")]),_:1}),e("p",null,[l(" The "),s(r,null,{default:t(()=>[l("taxa2freq")]),_:1}),l(" command to snap each taxon to either a species or root (unknown) and report the frequency table of the results. ")]),e("p",null,[l(" The "),s(r,null,{default:t(()=>[l("taxa2tree")]),_:1}),l(" command will send the results to the Unipept webserver, where an interactive "),s(o,null,{default:t(()=>[l("HTML")]),_:1}),l("-visualisation will be created. The webpage can either be saved to a file, or you can request a shareable "),s(o,null,{default:t(()=>[l("URL")]),_:1}),l(" with --url. ")]),s(u,null,{default:t(()=>[s(a,null,{default:t(()=>[l("$")]),_:1}),l(" umgap taxa2tree --url < classification.fa "),ns,s(d,{to:"https://bl.ocks.org/5960ffd859fb17439d7975896f513bc3"},{default:t(()=>[l("https://bl.ocks.org/5960ffd859fb17439d7975896f513bc3")]),_:1})]),_:1}),s(A,{class:"mt-5",image:m(w)},null,8,["image"])]),_:1}),s(i,{class:"mt-5",title:"Recap","large-title":""},{default:t(()=>[e("p",null,[l(" The complete "),s(o,null,{default:t(()=>[l("UMGAP")]),_:1}),l(" can be written as a single command. This allows the steps to run in parallel, further speeding up the final result. ")]),s(u,null,{default:t(()=>[e("pre",null,[l(""),s(a,null,{default:t(()=>[l("$")]),_:1}),l(` umgap fastq2fasta A1.fq A2.fq |          # joining paired-end files
  umgap translate -a |                     # translating all six frames
  umgap prot2kmer2lca -o -k9 9-mer.index | # mapping each 9-mer onto a taxon or 0
  umgap seedextend |                       # filtering extended seeds
  sed '/^>/s_/.*__' |                      # dropping the paired-end and frame annotations
  umgap uniq |                             # joining equal headers (all taxa of the same read)
  umgap taxa2agg taxons.tsv |              # aggregating all taxa
  grep -v '^>' |                           # dropping headers
  umgap taxa2freq taxons.tsv               # make frequency table
taxon id,taxon name,stdin
332163,Candidatus Solibacter usitatus,1
392734,Terriglobus roseus,1
940615,Granulicella tundricola,1
`)])]),_:1}),ts]),_:1}),ss,e("ul",null,[(b(),T(g,null,R(c,h=>e("li",{key:h.short},G(h.full),1)),64))])]),_:1}))}});const fs=L(os,[["__scopeId","data-v-c5056e72"]]);export{fs as default};
