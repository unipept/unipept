import{d as T,i as r,j as I,o as B,c as V,w as e,l as k,bx as C,g as a,a as o,b as t,K as P,p as S,q}from"./index-eea28a33.js";import{H as c}from"./HeaderBodyCard-3295d4c5.js";import{I as l}from"./InlineCode-67d03729.js";import{I as n}from"./Initialism-440d96b0.js";import{S as R}from"./StaticAlert-5833da9d.js";import{E as _,T as z}from"./TryItCard-91655383.js";import{R as s}from"./ResourceLink-d34b4283.js";import{V as j}from"./VDivider-834b9f8e.js";import{V as v}from"./VTable-9d8ead1f.js";import{a as N,V as x}from"./VRow-94e3f3e6.js";import{V as O,a as H}from"./VTextarea-ac294625.js";import{_ as U}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-9d59c194.js";import"./VAlert-6315e811.js";import"./Boxed-9f9dd66a.js";import"./VField-cc36921e.js";import"./forwardRefs-e2994a01.js";const i=u=>(S("data-v-1b06d3a6"),u=u(),q(),u),A={class:"font-weight-light"},G=i(()=>a("h3",{class:"font-weight-light"}," Returns the taxonomic tree for a given list of taxon identifiers. ",-1)),E=i(()=>a("h3",{class:"font-weight-medium"}," input ",-1)),L=i(()=>a("h3",{class:"font-weight-medium"}," link ",-1)),D={class:"my-3"},J=i(()=>a("thead",null,[a("tr",null,[a("th",{class:"text-start"}," Name "),a("th",{class:"text-start"}," Description ")])],-1)),M=i(()=>a("tr",null,[a("td",null,[a("b",null,"Input[]"),a("br"),a("i",{style:{"font-size":"85%"}},"required")]),a("td",{class:"py-3"},[t(" List of taxon identifiers to calculate the taxonomic tree for. Add multiple parameters to specify multiple taxon id's. "),a("br"),a("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: integer ")])],-1)),W=i(()=>a("td",null,[a("b",null,"link"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),X={class:"py-3"},K=i(()=>a("br",null,null,-1)),F={class:"mt-3",style:{"font-size":"85%"}},Q=i(()=>a("thead",null,[a("tr",null,[a("th",{class:"text-left"},"Name"),a("th",{class:"text-left"},"Description")])],-1)),Y=i(()=>a("td",null,[a("b",null,"Input[]"),a("br"),a("i",{style:{"font-size":"85%"}},"required")],-1)),Z={class:"py-3"},$=i(()=>a("br",null,null,-1)),tt=i(()=>a("div",{class:"mt-3",style:{"font-size":"85%"}},"Value: Object",-1)),et=i(()=>a("td",null,[a("b",null,"link"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),at={class:"py-3"},ot=i(()=>a("br",null,null,-1)),it={class:"mt-3",style:{"font-size":"85%"}},lt=i(()=>a("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1)),nt=i(()=>a("i",null,"Bacteroides fragilis",-1)),st=i(()=>a("i",null,"Bacteroides intestinalis",-1)),rt=i(()=>a("i",null,"Coprobacter fastidiosus",-1)),ut=i(()=>a("i",null,"Bacteroides fragilis",-1)),dt=i(()=>a("i",null,"Bacteroides intestinalis",-1)),ct=i(()=>a("i",null,"Coprobacter fastidiosus",-1)),pt=i(()=>a("i",null,"Bacteroides fragilis",-1)),ft=i(()=>a("i",null,"Bacteroides intestinalis",-1)),ht=i(()=>a("i",null,"Coprobacter fastidiosus",-1)),mt=i(()=>a("h3",{class:"font-weight-medium"}," Input[] ",-1)),_t=i(()=>a("h3",{class:"font-weight-medium"}," Parameters ",-1)),xt=T({__name:"APITaxa2TreePage",setup(u){const w=new C,p=r({}),g=r({}),f=r(""),h=r(!1),b=r({}),y=async()=>{b.value=await w.taxa2tree(f.value.split(`
`),h.value)};return I(async()=>{p.value=await w.taxa2tree(["817","329854","1099853"]),g.value={gist:"https://gist.github.com/1d3e41bf41c4ca5b97aa802c58484393"}}),(wt,d)=>(B(),V(k,null,{default:e(()=>[a("h1",A,[o(n,null,{default:e(()=>[t("POST")]),_:1}),t(" /api/v1/taxa2tree ")]),G,o(j,{class:"my-2"}),a("p",null,[t(" This method constructs and returns the taxonomic tree for a given list of "),o(n,null,{default:e(()=>[t("NCBI")]),_:1}),t(" taxon identifiers. ")]),o(c,{id:"request",title:"Request"},{default:e(()=>[a("p",null,[t(" The taxa2tree method can be used by doing a "),o(n,null,{default:e(()=>[t("HTTP POST")]),_:1}),t("-request (preferred) or "),o(n,null,{default:e(()=>[t("GET")]),_:1}),t("-request to "),o(l,null,{default:e(()=>[t("https://api.unipept.ugent.be/api/v1/taxa2tree")]),_:1}),t(". "),o(s,{to:"#parameters",router:""},{default:e(()=>[t("Parameters")]),_:1}),t(" can be included in the request body ("),o(n,null,{default:e(()=>[t("POST")]),_:1}),t(") or in the query string ("),o(n,null,{default:e(()=>[t("GET")]),_:1}),t("). The only required parameter is "),o(l,null,{default:e(()=>[t("input[]")]),_:1}),t(", which takes one or more tryptic peptides. ")]),E,a("p",null,[o(l,null,{default:e(()=>[t("input[]")]),_:1}),t(" is a required parameter that takes at least one taxon identifier. Unipept will compute and return the taxonomic tree for the given taxa. To pass multiple taxon identifiers, simply add multiple "),o(l,null,{default:e(()=>[t("input[]")]),_:1}),t(" parameters (see "),o(s,{to:"#example",router:""},{default:e(()=>[t("example")]),_:1}),t("). ")]),o(R,{title:"Input size"},{default:e(()=>[a("p",null,[t(" Unipept puts no restrictions on the number of peptides passed to the "),o(l,null,{default:e(()=>[t("input[]")]),_:1}),t(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),o(n,null,{default:e(()=>[t("GET")]),_:1}),t("-request, exceed the maximum "),o(n,null,{default:e(()=>[t("URL")]),_:1}),t(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),L,a("p",null,[o(l,null,{default:e(()=>[t("link")]),_:1}),t(" is an optional parameter and can either be "),o(l,null,{default:e(()=>[t("true")]),_:1}),t(" or "),o(l,null,{default:e(()=>[t("false")]),_:1}),t(". When not set explicitly, the parameter defaults to "),o(l,null,{default:e(()=>[t("false")]),_:1}),t(". When the parameter is set to "),o(l,null,{default:e(()=>[t("true")]),_:1}),t(", Unipept will return an "),o(n,null,{default:e(()=>[t("URL")]),_:1}),t(" that points to a GitHub gist in which the visualization code for this sample is stored. See the "),o(s,{to:"#response",router:""},{default:e(()=>[t("response")]),_:1}),t(" section for an overview of the information fields returned. ")])]),_:1}),o(c,{id:"response",title:"Response",class:"mt-5"},{default:e(()=>[t(" The taxonomic tree for the given list of taxon identifiers is returned as a "),o(n,null,{default:e(()=>[t("JSON")]),_:1}),t(" object. This object is a tree that's represented by a hierarchical construction of nodes. By default, the object contains the following information fields extracted from the "),o(n,null,{default:e(()=>[t("NCBI")]),_:1}),t(" taxonomy: "),a("ul",D,[a("li",null,[o(l,null,{default:e(()=>[t("id")]),_:1}),t(": the "),o(n,null,{default:e(()=>[t("NCBI")]),_:1}),t(" taxon id of the node")]),a("li",null,[o(l,null,{default:e(()=>[t("name")]),_:1}),t(": the name of the node")]),a("li",null,[o(l,null,{default:e(()=>[t("rank")]),_:1}),t(": the taxonomic rank of the node")]),a("li",null,[o(l,null,{default:e(()=>[t("data")]),_:1}),t(": extra information associated with this node. "),a("ul",null,[a("li",null,[o(l,null,{default:e(()=>[t("count")]),_:1}),t(": how many of the given taxa are directly or indirectly associated with this node? (e.g. correspond to the node itself or one of it's children) ")]),a("li",null,[o(l,null,{default:e(()=>[t("self_count")]),_:1}),t(": how many of the given taxa are directly associated with this node?")])])]),a("li",null,[o(l,null,{default:e(()=>[t("children")]),_:1}),t(": a list of nodes that are the children of this node in the "),o(n,null,{default:e(()=>[t("NCBI")]),_:1}),t("-taxonomy. These have the same structure as the root "),o(n,null,{default:e(()=>[t("JSON")]),_:1}),t("-object. ")])])]),_:1}),o(c,{id:"parameters",title:"GET-Parameters",class:"mt-5"},{default:e(()=>[o(v,null,{default:e(()=>[J,a("tbody",null,[M,a("tr",null,[W,a("td",X,[t(" Return an URL that points to a GitHub gist in which the visualization code for this sample is stored if "),o(l,null,{default:e(()=>[t("true")]),_:1}),t(". "),K,a("div",F,[t(" Value: Must be "),o(l,null,{default:e(()=>[t("true")]),_:1}),t(" or "),o(l,null,{default:e(()=>[t("false")]),_:1}),t(" (default) ")])])])])]),_:1})]),_:1}),o(c,{title:"POST-Parameters",class:"mt-5"},{default:e(()=>[o(v,null,{default:e(()=>[Q,a("tbody",null,[a("tr",null,[Y,a("td",Z,[t(" List of taxon identifiers and associated counts to calculate the taxonomic tree for. Should be a "),o(n,null,{default:e(()=>[t("JSON")]),_:1}),t("-object with taxon id's as keys and counts as values. "),$,tt])]),a("tr",null,[et,a("td",at,[t(" Return an URL that points to a GitHub gist in which the visualization code for this sample is stored if "),o(l,null,{default:e(()=>[t("true")]),_:1}),t(". "),ot,a("div",it,[t("Value: Must be "),o(l,null,{default:e(()=>[t("true")]),_:1}),t(" or "),o(l,null,{default:e(()=>[t("false")]),_:1}),t(" (default)")])])])])]),_:1})]),_:1}),lt,o(_,{id:"example",title:"Calculate the taxonomic tree for a given list of taxon identifiers",response:p.value},{description:e(()=>[t(" This example calculates and retrieves the taxonomic tree of "),nt,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:e(()=>[t("817")]),_:1}),t("), "),st,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:e(()=>[t("329854")]),_:1}),t(") and "),rt,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=1099853"},{default:e(()=>[t("1099853")]),_:1}),t("). ")]),post:e(()=>[t(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2tree -d 'input[]=817' -d 'input[]=329854' -d 'input[]=1099853' ")]),get:e(()=>[t(" https://api.unipept.ugent.be/api/v1/taxa2tree.json?input[]=817&input[]=329854&input[]=1099853 ")]),_:1},8,["response"]),o(_,{class:"mt-5",title:"Retrieve the taxonomic tree and its lineage for a given list of taxon identifiers",response:p.value},{description:e(()=>[t(" This example calculates and retrieves the taxonomic tree of "),ut,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:e(()=>[t("817")]),_:1}),t("), "),dt,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:e(()=>[t("329854")]),_:1}),t(") and "),ct,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=1099853"},{default:e(()=>[t("1099853")]),_:1}),t("). ")]),post:e(()=>[t(` curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2tree --data '{"counts": {"817": 3, "329854": 5, "1099853": 7}}' `)]),get:e(()=>[t(" Can only be performed with a POST-request ")]),_:1},8,["response"]),o(_,{class:"mt-5",title:"Retrieve the taxonomic tree and its lineage for a given list of taxon identifiers",response:g.value},{description:e(()=>[t(" This example calculates and retrieves the taxonomic tree of "),pt,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:e(()=>[t("817")]),_:1}),t("), "),ft,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:e(()=>[t("329854")]),_:1}),t("), "),ht,t(" (taxon id "),o(s,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=1099853"},{default:e(()=>[t("1099853")]),_:1}),t(") and returns a GitHub gist link. ")]),post:e(()=>[t(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2tree -d 'input[]=817' -d 'input[]=329854' -d 'input[]=1099853' -d 'link=true' ")]),get:e(()=>[t(" https://api.unipept.ugent.be/api/v1/taxa2tree.json?input[]=817&input[]=329854&input[]=1099853&link=true ")]),_:1},8,["response"]),o(z,{id:"try",class:"mt-5",response:b.value,command:"taxa2tree"},{default:e(()=>[o(N,null,{default:e(()=>[o(x,{cols:"12"},{default:e(()=>[mt,o(O,{modelValue:f.value,"onUpdate:modelValue":d[0]||(d[0]=m=>f.value=m),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),o(x,{cols:"12",class:"dark-label"},{default:e(()=>[_t,o(H,{modelValue:h.value,"onUpdate:modelValue":d[1]||(d[1]=m=>h.value=m),color:"primary",inset:"",label:"link",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),o(x,{cols:"12"},{default:e(()=>[o(P,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:y},{default:e(()=>[t(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});const Ot=U(xt,[["__scopeId","data-v-1b06d3a6"]]);export{Ot as default};
