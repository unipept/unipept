import{I as o}from"./InlineCode-67d03729.js";import{H as p}from"./HeaderBodyCard-3295d4c5.js";import{B as s,S as a}from"./Boxed-9f9dd66a.js";import{R as u}from"./ResourceLink-d34b4283.js";import{S as d}from"./StaticAlert-5833da9d.js";import{I as i}from"./Initialism-440d96b0.js";import{d as _,o as r,c,w as l,l as h,a as n,g as e,b as t,t as f}from"./index-eea28a33.js";import{V as m}from"./VDivider-834b9f8e.js";import"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-9d59c194.js";import"./VAlert-6315e811.js";const x=e("h1",{class:"font-weight-light"}," unipept pept2taxa ",-1),b=e("h3",{class:"font-weight-light"}," Returns the set of taxa extracted from the UniProt entries containing a given tryptic peptide. ",-1),A=e("i",null,"standard input",-1),I=e("h3",null,"Command line arguments",-1),G=e("p",null," If input is supplied using command line arguments, the accession numbers must be separated by spaces. ",-1),S=e("h4",null,"Example",-1),K=e("br",null,null,-1),E=e("br",null,null,-1),F=e("br",null,null,-1),g=e("br",null,null,-1),L=e("h3",null,"File input",-1),y=e("h4",null,"Example",-1),P=e("br",null,null,-1),Q=e("br",null,null,-1),N=e("br",null,null,-1),M=e("br",null,null,-1),C=e("br",null,null,-1),k=e("br",null,null,-1),w=e("br",null,null,-1),B=e("h3",null,"Standard input",-1),V=e("i",null,"standard input",-1),H=e("i",null,"standard input",-1),Y=e("h4",null,"Example",-1),$=e("br",null,null,-1),D=e("br",null,null,-1),T=e("br",null,null,-1),R=e("br",null,null,-1),U=e("br",null,null,-1),v=e("br",null,null,-1),q=e("br",null,null,-1),z=e("i",null,"standard output",-1),j=e("h3",null,"File output",-1),W=e("h4",null,"Example",-1),O=e("br",null,null,-1),J=e("br",null,null,-1),X=e("br",null,null,-1),Z=e("br",null,null,-1),tt=e("br",null,null,-1),et=e("h3",null,"Standard output",-1),lt=e("i",null,"standard output",-1),nt=e("h4",null,"Example",-1),at=e("br",null,null,-1),ot=e("br",null,null,-1),st=e("br",null,null,-1),it=e("br",null,null,-1),ut=e("br",null,null,-1),pt=e("br",null,null,-1),dt=e("br",null,null,-1),_t=e("br",null,null,-1),rt=e("br",null,null,-1),ct=e("br",null,null,-1),ht=e("h4",null,"Example",-1),ft=e("br",null,null,-1),mt=e("br",null,null,-1),xt=e("br",null,null,-1),bt=e("br",null,null,-1),At=e("br",null,null,-1),It=e("br",null,null,-1),Gt=e("br",null,null,-1),St=e("br",null,null,-1),Kt=e("br",null,null,-1),Et=e("br",null,null,-1),Ft=e("br",null,null,-1),gt=e("h2",null,[t("--equate / -e "),e("span",{class:"text-caption grey--text text--darken-2"},"Equate isoleucine and leucine")],-1),Lt=e("i",null,"Equate I and L?",-1),yt=e("h4",null,"Example",-1),Pt=e("br",null,null,-1),Qt=e("br",null,null,-1),Nt=e("br",null,null,-1),Mt=e("br",null,null,-1),Ct=e("b",null,"--equate",-1),kt=e("br",null,null,-1),wt=e("br",null,null,-1),Bt=e("br",null,null,-1),Vt=e("br",null,null,-1),Ht=e("br",null,null,-1),Yt=e("br",null,null,-1),$t=e("br",null,null,-1),Dt=e("br",null,null,-1),Tt=e("br",null,null,-1),Rt=e("h2",null,[t("--input / -i "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify an input file")],-1),Ut=e("i",null,"standard input",-1),vt=e("h4",null,"Example",-1),qt=e("br",null,null,-1),zt=e("br",null,null,-1),jt=e("br",null,null,-1),Wt=e("br",null,null,-1),Ot=e("b",null,"--input",-1),Jt=e("br",null,null,-1),Xt=e("br",null,null,-1),Zt=e("br",null,null,-1),te=e("br",null,null,-1),ee=e("h2",null,[t("--output / -o "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify an output file")],-1),le=e("i",null,"standard output",-1),ne=e("h4",null,"Example",-1),ae=e("b",null,"--output",-1),oe=e("br",null,null,-1),se=e("br",null,null,-1),ie=e("br",null,null,-1),ue=e("br",null,null,-1),pe=e("br",null,null,-1),de=e("h2",null,[t("--select / -s "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify the output fields")],-1),_e=e("b",null,"*",-1),re=e("h4",null,"Example",-1),ce=e("b",null,"--select",-1),he=e("br",null,null,-1),fe=e("br",null,null,-1),me=e("br",null,null,-1),xe=e("br",null,null,-1),be=e("b",null,"--select",-1),Ae=e("b",null,"--select",-1),Ie=e("br",null,null,-1),Ge=e("br",null,null,-1),Se=e("br",null,null,-1),Ke=e("h2",null,[t("--format / -f "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify the output format")],-1),Ee=e("h4",null,"Example",-1),Fe=e("b",null,"--format",-1),ge=e("br",null,null,-1),Le=e("br",null,null,-1),ye=e("b",null,"--format",-1),Pe=e("br",null,null,-1),Qe=e("h2",null,[t("--all / -a "),e("span",{class:"text-caption grey--text text--darken-2"},"Request additional information")],-1),Ne=e("h4",null,"Example",-1),Me=e("b",null,"--all",-1),Ce=e("br",null,null,-1),ke=e("br",null,null,-1),we=e("br",null,null,-1),Be=e("br",null,null,-1),Ve=e("h2",null,[t("--help / -h "),e("span",{class:"text-caption grey--text text--darken-2"},"Display help")],-1),He=e("p",null," This flag displays the help. ",-1),Ye="<results><result><peptide>ISVAQGASK</peptide><taxon_id>9606</taxon_id><taxon_name>Homo sapiens</taxon_name><taxon_rank>species</taxon_rank></result><result><peptide>MFNEIAPK</peptide><taxon_id>1262758</taxon_id><taxon_name>Blautia sp. CAG:52</taxon_name><taxon_rank>species</taxon_rank></result><result><peptide>MFNEIAPK</peptide><taxon_id>1262948</taxon_id><taxon_name>Roseburia sp. CAG:471</taxon_name><taxon_rank>species</taxon_rank></result></results>",tl=_({__name:"CLIPept2TaxaPage",setup($e){return(De,Te)=>(r(),c(h,null,{default:l(()=>[x,b,n(m,{class:"my-2"}),e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("unipept pept2taxa")]),_:1}),t(" command takes one or more tryptic peptides as input and returns the set of ("),n(i,null,{default:l(()=>[t("NCBI")]),_:1}),t(") taxa extracted from the UniProt entries containing the peptides as output. This information is fetched by doing "),n(u,{to:"/apidocs/pept2taxa",router:""},{default:l(()=>[n(i,null,{default:l(()=>[t("API")]),_:1}),t("-requests")]),_:1}),t(" to the Unipept server. ")]),n(p,{id:"input",title:"Input","large-title":""},{default:l(()=>[e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("unipept pept2taxa")]),_:1}),t(" command expects tryptic peptides as input. The source of this input can be command line arguments, a file, or "),A,t(". If input is supplied using multiple sources at the same time, the order of priority as described above is used. ")]),I,G,S,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa MFNEIAPK ISVAQGASK "),K,t("peptide,taxon_id,taxon_name,taxon_rank "),E,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),F,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),g,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1}),L,e("p",null,[t(" Use the "),n(u,{to:"#options",router:""},{default:l(()=>[t("--input parameter")]),_:1}),t(" to specify a file to use as input. If input is supplied using a file, a single peptide per line is expected. ")]),y,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),P,t("MFNEIAPK "),Q,t("ISVAQGASK "),N,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa --input input.txt "),M,t("peptide,taxon_id,taxon_name,taxon_rank "),C,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),k,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),w,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1}),B,e("p",null,[t(" If the command is run without arguments and no file is specified, "),n(o,null,{default:l(()=>[t("unipept pept2taxa")]),_:1}),t(" will read its input from "),V,t(". When "),H,t(" is used, a single peptide per line is expected. ")]),Y,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),$,t("MFNEIAPK "),D,t("ISVAQGASK "),T,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input | unipept pept2taxa "),R,t("peptide,taxon_id,taxon_name,taxon_rank "),U,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),v,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),q,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1})]),_:1}),n(p,{id:"output",title:"Output",class:"mt-5","large-title":""},{default:l(()=>[e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("unipept pept2taxa")]),_:1}),t(" command outputs all "),n(i,null,{default:l(()=>[t("NCBI")]),_:1}),t(" taxonomy entries that are associated with UniProt entries that contain the given (tryptic) input peptides. By default, for each of the taxa, the "),n(i,null,{default:l(()=>[t("NCBI")]),_:1}),t(" taxon id, the name of the organism and the taxonomic rank are returned. By using the "),n(u,{to:"#options",router:""},{default:l(()=>[t("--all parameter")]),_:1}),t(", this can be supplemented with the full taxonomic lineage of the taxon. Consult the "),n(u,{to:"/apidocs/pept2taxa",router:""},{default:l(()=>[n(i,null,{default:l(()=>[t("API")]),_:1}),t(" documentation")]),_:1}),t(" for a detailed list of output fields. A selection of output fields can be specified with the "),n(u,{to:"#options",router:""},{default:l(()=>[t("--select parameter")]),_:1}),t(". By default, output is generated in csv format. By using the "),n(u,{to:"#options",router:""},{default:l(()=>[t("--format parameter")]),_:1}),t(", the format can be changed into json or xml. The output can be written to a file or to "),z,t(". ")]),j,e("p",null,[t(" Use the "),n(u,{to:"#options",router:""},{default:l(()=>[t("--output parameter")]),_:1}),t(" to specify an output file. If the file aready exists, the output will be appended to the end of the file. ")]),W,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa --output output.txt MFNEIAPK ISVAQGASK "),O,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat output.txt "),J,t("peptide,taxon_id,taxon_name,taxon_rank "),X,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),Z,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),tt,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1}),et,e("p",null,[t(" If no output file is specified, "),n(o,null,{default:l(()=>[t("unipept pept2taxa")]),_:1}),t(" will write its output to "),lt,t(". ")]),nt,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa MFNEIAPK ISVAQGASK "),at,t("peptide,taxon_id,taxon_name,taxon_rank "),ot,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),st,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),it,t("ISVAQGASK,9606,Homo sapiens,species "),ut,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa MFNEIAPK ISVAQGASK > output.txt "),pt,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat output.txt "),dt,t("peptide,taxon_id,taxon_name,taxon_rank "),_t,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),rt,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),ct,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1})]),_:1}),n(p,{id:"fasta",title:"Fasta support",class:"mt-5","large-title":""},{default:l(()=>[e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("unipept pept2taxa")]),_:1}),t(" command supports input (from any source) in a fasta-like format (for example generated by the "),n(u,{to:"/clidocs/prot2pept",router:""},{default:l(()=>[t("prot2pept command")]),_:1}),t("). This format consists of a fasta header (a line starting with a >), followed by one or more lines containing one peptide each. When this format is detected, the output will automatically include an extra information field containing the corresponding fasta header. ")]),ht,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),ft,t("> header 1 "),mt,t("ISVAQGASK "),xt,t("MFNEIAPK "),bt,t("> header 2 "),At,t("ISVAQGASK "),It,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa --input input.txt "),Gt,t("fasta_header,peptide,taxon_id,taxon_name,taxon_rank "),St,t("> header 1,ISVAQGASK,9606,Homo sapiens,species "),Kt,t("> header 1,MFNEIAPK,1262758,Blautia sp. CAG:52,species "),Et,t("> header 1,MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),Ft,t("> header 2,ISVAQGASK,9606,Homo sapiens,species ")]),_:1})]),_:1}),n(p,{id:"options",title:"Command-line options",class:"mt-5","large-title":""},{default:l(()=>[gt,e("p",null,[t(" If the "),n(o,null,{default:l(()=>[t("--equate")]),_:1}),t(" flag is set, isoleucine (I) and leucine (L) are equated when matching tryptic peptides to UniProt entries. This is similar to checking the "),Lt,t(" checkbox when performing a search in the Unipept web interface. ")]),yt,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa FEALLGDGSQYGLHLQYK "),Pt,t("peptide,taxon_id,taxon_name,taxon_rank "),Qt,t("FEALLGDGSQYGLHLQYK,408170,human gut metagenome,species "),Nt,t("FEALLGDGSQYGLHLQYK,411471,Subdoligranulum variabile DSM 15176,no rank "),Mt,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),Ct,t(" FEALLGDGSQYGLHLQYK "),kt,t("peptide,taxon_id,taxon_name,taxon_rank "),wt,t("FEALLGDGSQYGLHLQYK,408170,human gut metagenome,species "),Bt,t("FEALLGDGSQYGLHLQYK,411471,Subdoligranulum variabile DSM 15176,no rank "),Vt,t("FEALLGDGSQYGLHLQYK,411483,Faecalibacterium prausnitzii A2-165,no rank "),Ht,t("FEALLGDGSQYGLHLQYK,411485,Faecalibacterium prausnitzii M21/2,no rank "),Yt,t("FEALLGDGSQYGLHLQYK,657322,Faecalibacterium prausnitzii SL3/3,no rank "),$t,t("FEALLGDGSQYGLHLQYK,718252,Faecalibacterium prausnitzii L2-6,no rank "),Dt,t("FEALLGDGSQYGLHLQYK,748224,Faecalibacterium cf. prausnitzii KLE1255,no rank "),Tt,t("FEALLGDGSQYGLHLQYK,1262898,Faecalibacterium sp. CAG:82,species ")]),_:1}),Rt,e("p",null,[t(" All Unipept "),n(i,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands can process input from 3 sources: command line arguments, a file, or "),Ut,t(". The optional "),n(o,null,{default:l(()=>[t("--input")]),_:1}),t(" option allows you to specify an input file. The file should contain a single peptide per line. ")]),vt,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),qt,t("MFNEIAPK "),zt,t("OMGWTFBBQ "),jt,t("ISVAQGASK "),Wt,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),Ot,t(" input.txt "),Jt,t("peptide,taxon_id,taxon_name,taxon_rank "),Xt,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),Zt,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),te,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1}),ee,e("p",null,[t(" By default, the unipept commands write their output to "),le,t(". Using the optional "),n(o,null,{default:l(()=>[t("--output")]),_:1}),t(" option allows you to specify a file to write the output to. If the file already exists, the output will be appended; if it doesn't, a new file will be created. ")]),ne,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),ae,t(" output.txt MFNEIAPK ISVAQGASK "),oe,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat output.txt "),se,t("peptide,taxon_id,taxon_name,taxon_rank "),ie,t("MFNEIAPK,1262758,Blautia sp. CAG:52,species "),ue,t("MFNEIAPK,1262948,Roseburia sp. CAG:471,species "),pe,t("ISVAQGASK,9606,Homo sapiens,species ")]),_:1}),de,e("p",null,[t(" By default, the Unipept "),n(i,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands output all information fields received from the Unipept server. The "),n(o,null,{default:l(()=>[t("--select")]),_:1}),t(" option allows you to control which fields are returned. A list of fields can be specified by a comma-separated list, or by using multiple "),n(o,null,{default:l(()=>[t("--select")]),_:1}),t(" options. A "),_e,t(" can be used as a wildcard for field names. For example, "),n(o,null,{default:l(()=>[t("--select peptide,taxon*")]),_:1}),t(" will return the peptide field and all fields starting with taxon. ")]),re,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),ce,t(" peptide,taxon_id MFNEIAPK "),he,t("peptide,taxon_id "),fe,t("MFNEIAPK,1262758 "),me,t("MFNEIAPK,1262948 "),xe,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),be,t(" peptide "),Ae,t(" *name MFNEIAPK "),Ie,t("peptide,taxon_name "),Ge,t("MFNEIAPK,Blautia sp. CAG:52 "),Se,t("MFNEIAPK,Roseburia sp. CAG:471 ")]),_:1}),Ke,e("p",null,[t(" By default, the Unipept "),n(i,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands return their output in csv format. The "),n(o,null,{default:l(()=>[t("--format")]),_:1}),t(" option allows you to select another format. Supported formats are csv, json, and xml. ")]),Ee,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),Fe,t(" json ISVAQGASK MFNEIAPK "),ge,t('[{"peptide":"ISVAQGASK","taxon_id":9606,"taxon_name":"Homo sapiens","taxon_rank":"species"},{"peptide":"MFNEIAPK","taxon_id":1262758,"taxon_name":"Blautia sp. CAG:52","taxon_rank":"species"},{"peptide":"MFNEIAPK","taxon_id":1262948,"taxon_name":"Roseburia sp. CAG:471","taxon_rank":"species"}] '),Le,n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),ye,t(" xml ISVAQGASK MFNEIAPK "),Pe,t(f(Ye))]),_:1}),Qe,e("p",null,[t(" By default, the Unipept "),n(i,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands only request basic information from the Unipept server. By using the "),n(o,null,{default:l(()=>[t("--all")]),_:1}),t(" flag, you can request additional information fields such as the lineage of the returned taxa. You can use the "),n(o,null,{default:l(()=>[t("--select")]),_:1}),t(" option to select which fields are included in the output. ")]),n(d,{title:"Performance penalty"},{default:l(()=>[e("p",null,[t(" Setting "),n(o,null,{default:l(()=>[t("--all")]),_:1}),t(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1}),Ne,n(s,null,{default:l(()=>[n(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2taxa "),Me,t(" --select peptide,taxon_id,order* ISVAQGASK MFNEIAPK "),Ce,t("peptide,taxon_id,order_id,order_name "),ke,t("ISVAQGASK,9606,9443,Primates "),we,t("MFNEIAPK,1262758,186802,Clostridiales "),Be,t("MFNEIAPK,1262948,186802,Clostridiales ")]),_:1}),Ve,He]),_:1})]),_:1}))}});export{tl as default};
