import{I as o}from"./InlineCode-b941903d.js";import{H as a}from"./HeaderBodyCard-f3b47b61.js";import{B as i,S as s}from"./Boxed-1ca540a2.js";import{R as u}from"./ResourceLink-82ddf6bf.js";import{d as r,o as p,c as d,w as l,l as _,a as n,g as e,b as t}from"./index-fa2d734a.js";import{V as c}from"./VDivider-7dfa9365.js";import"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-4d112d66.js";const h=e("h1",{class:"font-weight-light"}," prot2pept ",-1),f=e("h3",{class:"font-weight-light"}," Splits proteins into peptides based on (trypsin) digest. ",-1),m=e("i",null,"standard input",-1),A=e("h4",null,"Example",-1),b=e("br",null,null,-1),g=e("br",null,null,-1),G=e("br",null,null,-1),y=e("br",null,null,-1),L=e("br",null,null,-1),T=e("br",null,null,-1),x=e("br",null,null,-1),I=e("i",null,"standard output",-1),E=e("h4",null,"Example",-1),R=e("br",null,null,-1),K=e("br",null,null,-1),V=e("br",null,null,-1),w=e("br",null,null,-1),P=e("br",null,null,-1),B=e("br",null,null,-1),$=e("br",null,null,-1),C=e("br",null,null,-1),k=e("br",null,null,-1),v=e("br",null,null,-1),D=e("br",null,null,-1),q=e("br",null,null,-1),N=e("br",null,null,-1),S=e("br",null,null,-1),H=e("br",null,null,-1),M=e("br",null,null,-1),Y=e("br",null,null,-1),F=e("br",null,null,-1),O=e("h2",null,[t("--pattern / -p "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify cleavage pattern")],-1),W=e("h4",null,"Example",-1),j=e("br",null,null,-1),z=e("br",null,null,-1),J=e("br",null,null,-1),Q=e("b",null,"--pattern",-1),U=e("br",null,null,-1),X=e("br",null,null,-1),Z=e("h2",null,[t("--help / -h "),e("span",{class:"text-caption grey--text text--darken-2"},"Display help")],-1),tt=e("p",null," This flag displays the help. ",-1),_t=r({__name:"CLIProt2PeptPage",setup(et){return(lt,nt)=>(p(),d(_,null,{default:l(()=>[h,f,n(c,{class:"my-2"}),e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("prot2pept")]),_:1}),t(" command takes one or more protein sequences as input, performs an in silico tryptic digest on them and returns the digested peptides as output. By default, a trypsin digest is simulated, but other proteases can be specified by using the "),n(u,{to:"#options",router:""},{default:l(()=>[t("--patern parameter")]),_:1}),t(". This command runs entirely locally and doesn't connect to any server. ")]),n(a,{id:"input",title:"Input","large-title":""},{default:l(()=>[e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("prot2pept")]),_:1}),t(" command expects protein sequences as input via "),m,t(". A single protein sequences per line is expected. ")]),A,n(i,null,{default:l(()=>[n(s,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),b,t("AALTERAALE "),g,t("MDGTEKYIIVK "),G,n(s,null,{default:l(()=>[t("$")]),_:1}),t(" cat input | prot2pept "),y,t("AALTER "),L,t("AALE "),T,t("MDGTEK "),x,t("YIIVK ")]),_:1})]),_:1}),n(a,{id:"output",title:"Output",class:"mt-5","large-title":""},{default:l(()=>[e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("prot2pept")]),_:1}),t(" command supports input in fasta format. This format consists of a fasta header (a line starting with a >), followed by one or more lines containing the protein sequence. When this format is detected, the command behaves slightly different. The main difference is that newlines between fasta headers are ignored: all lines between fasta headers are treated as a single protein. Next to this, the fasta headers are also written to output. ")])]),_:1}),n(a,{id:"fasta",title:"Fasta support",class:"mt-5","large-title":""},{default:l(()=>[e("p",null,[t(" The "),n(o,null,{default:l(()=>[t("prot2pept")]),_:1}),t(" command outputs the split peptides to "),I,t(". All peptides are separated by newlines. ")]),E,n(i,null,{default:l(()=>[n(s,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),R,t("AALTE "),K,t("AALRTER "),V,n(s,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt | prot2pept "),w,t("AALTE "),P,t("AALR "),B,t("TER "),$,n(s,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),C,t("> fasta header "),k,t("AALTE "),v,t("AALRTER "),D,t("> other header "),q,t("PEPTIDE "),N,n(s,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt | prot2pept "),S,t("> fasta header "),H,t("AALTEAALR "),M,t("TER "),Y,t("> other header "),F,t("PEPTIDE ")]),_:1})]),_:1}),n(a,{id:"options",title:"Command-line options",class:"mt-5","large-title":""},{default:l(()=>[O,e("p",null,[t(" By default, proteins are split by simulating a trypsin digest. This corresponds by splitting the input string by using the regular expression "),n(o,null,{default:l(()=>[t("([KR])([^P])")]),_:1}),t(". The "),n(o,null,{default:l(()=>[t("--pattern")]),_:1}),t(" option allows you to specify an alternative (ruby-style) regular expression to split the sequences. ")]),W,n(i,null,{default:l(()=>[n(s,null,{default:l(()=>[t("$")]),_:1}),t(' echo "LGAARPLGAGLAKVIGAGIGIGK" | prot2pept '),j,t("LGAARPLGAGLAK "),z,t("VIGAGIGIGK "),J,n(s,null,{default:l(()=>[t("$")]),_:1}),t(' echo "LGAARPLGAGLAKVIGAGIGIGK" | prot2pept '),Q,t(" '([KR])([^V])' "),U,t("LGAAR "),X,t("PLGAGLAKVIGAGIGIGK ")]),_:1}),Z,tt]),_:1})]),_:1}))}});export{_t as default};
