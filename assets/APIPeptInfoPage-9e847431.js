import{d as V,i as s,j as R,o as C,c as L,w as t,l as O,bx as q,g as n,a as l,b as e,K as D,p as Y,q as j}from"./index-fa2d734a.js";import{H as y}from"./HeaderBodyCard-f3b47b61.js";import{I as a}from"./InlineCode-b941903d.js";import{I as i}from"./Initialism-25eec5f3.js";import{S as T}from"./StaticAlert-03392fb6.js";import{E as p,T as G}from"./TryItCard-25724df8.js";import{R as c}from"./ResourceLink-82ddf6bf.js";import{V as k}from"./VDivider-7dfa9365.js";import{V as K}from"./VTable-b3c64698.js";import{a as Q,V as A}from"./VRow-781382bd.js";import{V as U,a as w}from"./VTextarea-3eec484e.js";import{_ as z}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-4d112d66.js";import"./VAlert-57bda60a.js";import"./Boxed-1ca540a2.js";import"./VField-f756959d.js";import"./forwardRefs-e2994a01.js";const u=f=>(Y("data-v-b2cfd686"),f=f(),j(),f),N={class:"font-weight-light"},B=u(()=>n("h3",{class:"font-weight-light"}," Returns functional information and the lowest common ancestor for a given tryptic peptide. ",-1)),H=u(()=>n("h3",{class:"font-weight-medium"}," input ",-1)),W=u(()=>n("h3",{class:"font-weight-medium"}," equate_il ",-1)),X=u(()=>n("i",null,"Equate I and L",-1)),J=u(()=>n("h3",{class:"font-weight-medium"}," extra ",-1)),M=u(()=>n("h3",{class:"font-weight-medium"}," domains ",-1)),F={class:"my-3"},Z={class:"multi-column my-3"},$=u(()=>n("br",{class:"mb-3"},null,-1)),ee=u(()=>n("thead",null,[n("tr",null,[n("th",{class:"text-start"}," Name "),n("th",{class:"text-start"}," Description ")])],-1)),te=u(()=>n("tr",null,[n("td",null,[n("b",null,"Input[]"),n("br"),n("i",{style:{"font-size":"85%"}},"required")]),n("td",{class:"py-3"},[e(" Tryptic peptide to search for. Add multiple parameters to search for multiple peptides. "),n("br"),n("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: string ")])],-1)),le=u(()=>n("td",null,[n("b",null,"equate_il"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),ne={class:"py-3"},ae=u(()=>n("br",null,null,-1)),ie={class:"mt-3",style:{"font-size":"85%"}},ue=u(()=>n("td",null,[n("b",null,"extra"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),se={class:"py-3"},oe=u(()=>n("br",null,null,-1)),re={class:"mt-3",style:{"font-size":"85%"}},de=u(()=>n("td",null,[n("b",null,"domains"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),pe={class:"py-3"},ce=u(()=>n("br",null,null,-1)),fe={class:"mt-3",style:{"font-size":"85%"}},me=u(()=>n("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1)),he=u(()=>n("h3",{class:"font-weight-medium"}," Input[] ",-1)),_e=u(()=>n("h3",{class:"font-weight-medium"}," Parameters ",-1)),be=V({__name:"APIPeptInfoPage",setup(f){const d=new q,g=s({}),P=s({}),v=s({}),I=s({}),E=s({}),m=s(""),h=s(!1),_=s(!1),b=s(!1),S=s({}),x=async()=>{S.value=await d.peptinfo(m.value.split(`
`),h.value,_.value,b.value)};return R(async()=>{g.value=await d.peptinfo(["AIPQLEVARPADAYETAEAYR"]),P.value=await d.peptinfo(["AIPQLEVARPADAYETAEAYR","APVLSDSSCK"]),v.value=await d.peptinfo(["APVLSDSSCK"],!0,void 0,void 0),I.value=await d.peptinfo(["AIPQLEVARPADAYETAEAYR"],void 0,!0,void 0),E.value=await d.peptinfo(["APVLSDSSCK"],void 0,void 0,!0)}),(ye,o)=>(C(),L(O,null,{default:t(()=>[n("h1",N,[l(i,null,{default:t(()=>[e("POST")]),_:1}),e(" /api/v1/peptinfo ")]),B,l(k,{class:"my-2"}),n("p",null,[e(" This method returns functional information and the lowest common ancestor a given tryptic peptide. This is the same information as provided when performing a search with the "),l(c,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),l(y,{id:"request",title:"Request","large-title":""},{default:t(()=>[n("p",null,[e(" The peptinfo method can be used by doing a "),l(i,null,{default:t(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("-request to "),l(a,null,{default:t(()=>[e("https://api.unipept.ugent.be/api/v1/peptinfo")]),_:1}),e(". "),l(c,{to:"#parameters",router:""},{default:t(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),l(i,null,{default:t(()=>[e("POST")]),_:1}),e(") or in the query string ("),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("). The only required parameter is "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),H,n("p",null,[l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes one or more tryptic peptides. Unipept will return the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with each of the "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" peptides based on their occurrence in UniProt entries. To pass multiple peptides at once, simply add multiple "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameters (see "),l(c,{to:"#example2",router:""},{default:t(()=>[e("example")]),_:1}),e("). ")]),l(T,{title:"Input size"},{default:t(()=>[n("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("-request, exceed the maximum "),l(i,null,{default:t(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),W,n("p",null,[l(a,null,{default:t(()=>[e("equate_il")]),_:1}),e(" is an optional parameter and can either be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", isoleucine (I) and leucine (L) are equated when matching tryptic peptides to UniProt entries. This setting is similar to checking the "),X,e(" checkbox when performing a search with the "),l(c,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),J,n("p",null,[l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will also return the name associated with a "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term and an "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number, the name and type associated with an InterPro entry, and the complete lineage of the taxonomic lowest common ancestor. See the "),l(c,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),M,n("p",null,[l(a,null,{default:t(()=>[e("domains")]),_:1}),e(" is an optional parameter that can be used to order the "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms in groups according to their namespace (cellular component, molecular function, biological process). ")]),l(T,{title:"Performance penalty"},{default:t(()=>[n("p",null,[e(" Setting "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("domains")]),_:1}),e(" to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),l(y,{id:"response",title:"Response",class:"mt-5","large-title":""},{default:t(()=>[e(" A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects is returned. By default, each object contains the following information fields: "),n("ul",F,[n("li",null,[l(a,null,{default:t(()=>[e("peptide")]),_:1}),e(": the peptide that was searched for.")]),n("li",null,[l(a,null,{default:t(()=>[e("total_protein_count")]),_:1}),e(": total amount of proteins matched with the given peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("ec")]),_:1}),e(": A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent an "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number associated with the current tryptic peptide. "),n("ul",null,[n("li",null,[l(a,null,{default:t(()=>[e("ec_number")]),_:1}),e(": "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number associated with the current tryptic peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number. ")]),n("li",null,[l(a,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])]),n("li",null,[l(a,null,{default:t(()=>[e("go")]),_:1}),e(": A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent a "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term associated with the current tryptic peptide. "),n("ul",null,[n("li",null,[l(a,null,{default:t(()=>[e("go_term")]),_:1}),e(": "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term associated with the current tryptic peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term. ")]),n("li",null,[l(a,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])]),n("li",null,[l(a,null,{default:t(()=>[e("ipr")]),_:1}),e(": A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent an InterPro entry associated with the current tryptic peptide. "),n("ul",null,[n("li",null,[l(a,null,{default:t(()=>[e("code")]),_:1}),e(": InterPro entry code associated with the current tryptic peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current InterPro code. ")]),n("li",null,[l(a,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the InterPro entry. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")]),n("li",null,[l(a,null,{default:t(()=>[e("type")]),_:1}),e(": optional, type of the InterPro entry. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])]),n("li",null,[l(a,null,{default:t(()=>[e("taxon_id")]),_:1}),e(": the "),l(i,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxon id of the taxonomic lowest common ancestor")]),n("li",null,[l(a,null,{default:t(()=>[e("taxon_name")]),_:1}),e(": the name of the taxonomic lowest common ancestor")]),n("li",null,[l(a,null,{default:t(()=>[e("taxon_rank")]),_:1}),e(": the taxonomic rank of the taxonomic lowest common ancestor")])]),e(" When the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", objects contain additional information about the lineage of the taxonomic lowest common ancestor extracted from the "),l(i,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxonomy. The taxon id of each rank in the lineage is specified using the following information fields: "),n("ul",Z,[n("li",null,[l(a,null,{default:t(()=>[e("superkingdom_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("kingdom_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subkingdom_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("superphylum_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("phylum_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subphylum_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("superclass_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("class_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subclass_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("infraclass_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("superorder_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("order_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("suborder_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("infraorder_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("parvorder_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("superfamily_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("family_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subfamily_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("tribe_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subtribe_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("genus_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subgenus_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("species_group_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("species_subgroup_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("species_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("subspecies_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("varietas_id")]),_:1})]),n("li",null,[l(a,null,{default:t(()=>[e("forma_id")]),_:1})])]),e(" The "),l(a,null,{default:t(()=>[e("name")]),_:1}),e(" associated with a "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term and an "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number, and the name and type of an InterPro entry, are also provided when the extra parameter is set to true. "),$,e(" When the "),l(a,null,{default:t(()=>[e("domains")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", objects are placed in a group corresponding to their namespace and the objects are nested in an additional object. See the examples for more information on how to use this. ")]),_:1}),l(y,{id:"parameters",title:"Parameters",class:"mt-5","large-title":""},{default:t(()=>[l(K,null,{default:t(()=>[ee,n("tbody",null,[te,n("tr",null,[le,n("td",ne,[e(" Equate isoleucine (I) and leucine (L). "),ae,n("div",ie,[e(" Value: Must be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),n("tr",null,[ue,n("td",se,[e(" Return additional information fields if "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". "),oe,n("div",re,[e(" Value: Must be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),n("tr",null,[de,n("td",pe,[e(" Separates "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-namespaces and InterPro types and places objects in group associated with current namespace or type when "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". "),ce,n("div",fe,[e(" Value: Must be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),me,l(p,{title:"Retrieve the functional ec-numbers, go-terms, InterPro entries and lowest common ancestor associated with a given tryptic peptide",response:g.value},{description:t(()=>[e(" This example retrieves all functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms, InterPro entries and the lowest common ancestor associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(". The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/peptinfo -d 'input[]=AIPQLEVARPADAYETAEAYR' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/peptinfo.json?input[]=AIPQLEVARPADAYETAEAYR ")]),_:1},8,["response"]),l(p,{id:"example2",class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms, InterPro entries and lowest common ancestor associated with each of multiple tryptic peptides",response:P.value},{description:t(()=>[e(" This example retrieves all functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms, InterPro entries and the lowest common ancestor for both the tryptic peptides "),n("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" and "),n("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". The result is the same as the combination of this search and this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/peptinfo -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'input[]=APVLSDSSCK' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/peptinfo.json?input[]=AIPQLEVARPADAYETAEAYR&input[]=APVLSDSSCK ")]),_:1},8,["response"]),l(p,{class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms, InterPro Entries and lowest common ancestor associated with a single tryptic peptide, while equating I and L",response:v.value},{description:t(()=>[e(" This example retrieves all functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms, InterPro entries and the lowest common ancestor associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". In searching, isoleucine (I) and leucinge (L) are considered equal. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/peptinfo -d 'input[]=APVISDSSCK' -d 'equate_il=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/peptinfo.json?input[]=APVISDSSCK&equate_il=true ")]),_:1},8,["response"]),l(p,{class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms, InterPro entries and lowest common ancestor associated with a single tryptic peptide",response:I.value},{description:t(()=>[e(" This example retrieves all functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms, InterPro entries and the lowest common ancestor associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" including the name of each "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term, the name and type of each InterPro entry, and its complete lineage. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/peptinfo -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/peptinfo.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true ")]),_:1},8,["response"]),l(p,{class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms, InterPro entries and lowest common ancestor associated with a single tryptic peptide, making a distinction between different go-domains and InterPro types",response:E.value},{description:t(()=>[e(" This example retrieves all functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms, InterPro entries and the lowest common ancestor associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(" distributed over the distinct "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-domains and InterPro types. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/peptinfo -d 'input[]=APVLSDSSCK' -d 'domains=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/peptinfo.json?input[]=APVLSDSSCK&domains=true ")]),_:1},8,["response"]),l(G,{id:"try",class:"mt-5",response:S.value,command:"pept2info"},{default:t(()=>[l(Q,null,{default:t(()=>[l(A,{cols:"12"},{default:t(()=>[he,l(U,{modelValue:m.value,"onUpdate:modelValue":o[0]||(o[0]=r=>m.value=r),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),l(A,{cols:"12",class:"dark-label"},{default:t(()=>[_e,l(w,{modelValue:_.value,"onUpdate:modelValue":o[1]||(o[1]=r=>_.value=r),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),l(w,{modelValue:h.value,"onUpdate:modelValue":o[2]||(o[2]=r=>h.value=r),color:"primary",inset:"",label:"equate_il",density:"compact","hide-details":""},null,8,["modelValue"]),l(w,{modelValue:b.value,"onUpdate:modelValue":o[3]||(o[3]=r=>b.value=r),color:"primary",inset:"",label:"domains",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),l(A,{cols:"12"},{default:t(()=>[l(D,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:x},{default:t(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});const Ye=z(be,[["__scopeId","data-v-b2cfd686"]]);export{Ye as default};
