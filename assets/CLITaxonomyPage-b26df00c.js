import{I as s}from"./InlineCode-67d03729.js";import{H as _}from"./HeaderBodyCard-3295d4c5.js";import{B as i,S as a}from"./Boxed-9f9dd66a.js";import{R as d}from"./ResourceLink-d34b4283.js";import{I as u}from"./Initialism-440d96b0.js";import{d as c,k as h,o as f,c as m,w as l,l as x,g as e,b as t,a as o,t as b,p as y,q as g}from"./index-eea28a33.js";import{V as B}from"./VDivider-834b9f8e.js";import{_ as w}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-9d59c194.js";const n=r=>(y("data-v-5bb7ba8a"),r=r(),g(),r),k=n(()=>e("h1",{class:"font-weight-light"}," unipept taxonomy ",-1)),I={class:"font-weight-light"},$=n(()=>e("i",null,"standard input",-1)),C=n(()=>e("h3",null,"Command line arguments",-1)),T=n(()=>e("p",null," If input is supplied using command line arguments, the accession numbers must be separated by spaces. ",-1)),v=n(()=>e("h4",null,"Example",-1)),S=n(()=>e("br",null,null,-1)),E=n(()=>e("br",null,null,-1)),U=n(()=>e("br",null,null,-1)),L=n(()=>e("h3",null,"File input",-1)),A=n(()=>e("h4",null,"Example",-1)),q=n(()=>e("br",null,null,-1)),N=n(()=>e("br",null,null,-1)),P=n(()=>e("br",null,null,-1)),V=n(()=>e("br",null,null,-1)),j=n(()=>e("br",null,null,-1)),D=n(()=>e("br",null,null,-1)),F=n(()=>e("h3",null,"Standard input",-1)),R=n(()=>e("i",null,"standard input",-1)),H=n(()=>e("i",null,"standard input",-1)),W=n(()=>e("h4",null,"Example",-1)),O=n(()=>e("br",null,null,-1)),Y=n(()=>e("br",null,null,-1)),z=n(()=>e("br",null,null,-1)),G=n(()=>e("br",null,null,-1)),J=n(()=>e("br",null,null,-1)),K=n(()=>e("br",null,null,-1)),M=n(()=>e("i",null,"standard output",-1)),Q=n(()=>e("h3",null,"File output",-1)),X=n(()=>e("h4",null,"Example",-1)),Z=n(()=>e("br",null,null,-1)),tt=n(()=>e("br",null,null,-1)),et=n(()=>e("br",null,null,-1)),nt=n(()=>e("br",null,null,-1)),lt=n(()=>e("h3",null,"Standard output",-1)),ot=n(()=>e("i",null,"standard output",-1)),at=n(()=>e("h4",null,"Example",-1)),st=n(()=>e("br",null,null,-1)),it=n(()=>e("br",null,null,-1)),ut=n(()=>e("br",null,null,-1)),dt=n(()=>e("br",null,null,-1)),rt=n(()=>e("br",null,null,-1)),_t=n(()=>e("br",null,null,-1)),pt=n(()=>e("br",null,null,-1)),ct=n(()=>e("br",null,null,-1)),ht=n(()=>e("h4",null,"Example",-1)),ft=n(()=>e("br",null,null,-1)),mt=n(()=>e("br",null,null,-1)),xt=n(()=>e("br",null,null,-1)),bt=n(()=>e("br",null,null,-1)),yt=n(()=>e("br",null,null,-1)),gt=n(()=>e("br",null,null,-1)),Bt=n(()=>e("br",null,null,-1)),wt=n(()=>e("br",null,null,-1)),kt=n(()=>e("br",null,null,-1)),It=n(()=>e("br",null,null,-1)),$t=n(()=>e("h2",null,[t("--input / -i "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify an input file")],-1)),Ct=n(()=>e("i",null,"standard input",-1)),Tt=n(()=>e("h4",null,"Example",-1)),vt=n(()=>e("br",null,null,-1)),St=n(()=>e("br",null,null,-1)),Et=n(()=>e("br",null,null,-1)),Ut=n(()=>e("b",null,"--input",-1)),Lt=n(()=>e("br",null,null,-1)),At=n(()=>e("br",null,null,-1)),qt=n(()=>e("br",null,null,-1)),Nt=n(()=>e("h2",null,[t("--output / -o "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify an output file")],-1)),Pt=n(()=>e("i",null,"standard output",-1)),Vt=n(()=>e("h4",null,"Example",-1)),jt=n(()=>e("b",null,"--output",-1)),Dt=n(()=>e("br",null,null,-1)),Ft=n(()=>e("br",null,null,-1)),Rt=n(()=>e("br",null,null,-1)),Ht=n(()=>e("br",null,null,-1)),Wt=n(()=>e("h2",null,[t("--select / -s "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify the output fields")],-1)),Ot=n(()=>e("b",null,"*",-1)),Yt=n(()=>e("h4",null,"Example",-1)),zt=n(()=>e("b",null,"--select",-1)),Gt=n(()=>e("br",null,null,-1)),Jt=n(()=>e("br",null,null,-1)),Kt=n(()=>e("br",null,null,-1)),Mt=n(()=>e("br",null,null,-1)),Qt=n(()=>e("b",null,"--select",-1)),Xt=n(()=>e("b",null,"--select",-1)),Zt=n(()=>e("br",null,null,-1)),te=n(()=>e("br",null,null,-1)),ee=n(()=>e("br",null,null,-1)),ne=n(()=>e("h2",null,[t("--format / -f "),e("span",{class:"text-caption grey--text text--darken-2"},"Specify the output format")],-1)),le=n(()=>e("h4",null,"Example",-1)),oe=n(()=>e("b",null,"--format",-1)),ae=n(()=>e("br",null,null,-1)),se=n(()=>e("br",null,null,-1)),ie=n(()=>e("b",null,"--format",-1)),ue=n(()=>e("br",null,null,-1)),de=n(()=>e("h2",null,[t("--all / -a "),e("span",{class:"text-caption grey--text text--darken-2"},"Request additional information")],-1)),re=n(()=>e("h4",null,"Example",-1)),_e=n(()=>e("b",null,"--all",-1)),pe=n(()=>e("br",null,null,-1)),ce=n(()=>e("br",null,null,-1)),he=n(()=>e("br",null,null,-1)),fe=n(()=>e("h2",null,[t("--help / -h "),e("span",{class:"text-caption grey--text text--darken-2"},"Display help")],-1)),me=n(()=>e("p",null," This flag displays the help. ",-1)),xe="<results><result><taxon_id>817</taxon_id><taxon_name>Bacteroides fragilis</taxon_name><taxon_rank>species</taxon_rank></result><result><taxon_id>329854</taxon_id><taxon_name>Bacteroides intestinalis</taxon_name><taxon_rank>species</taxon_rank></result></results>",be=c({__name:"CLITaxonomyPage",setup(r){return(ye,ge)=>{const p=h("static-alert");return f(),m(x,null,{default:l(()=>[k,e("h3",I,[t(" Returns the taxonomic information for a given "),o(u,null,{default:l(()=>[t("NCBI")]),_:1}),t(" taxon identifier. ")]),o(B,{class:"my-2"}),e("p",null,[t(" The "),o(s,null,{default:l(()=>[t("unipept taxonomy")]),_:1}),t(" command takes one or more "),o(u,null,{default:l(()=>[t("NCBI")]),_:1}),t(" taxon id's as input and returns taxonomic information about these taxa as output. All this information is fetched by doing "),o(d,{to:"/apidocs/taxonomy",router:""},{default:l(()=>[o(u,null,{default:l(()=>[t("API")]),_:1}),t("-requests")]),_:1}),t(" to the Unipept server. ")]),o(_,{id:"input",title:"Input","large-title":""},{default:l(()=>[e("p",null,[t(" The "),o(s,null,{default:l(()=>[t("unipept taxonomy")]),_:1}),t(" command expects "),o(u,null,{default:l(()=>[t("NCBI")]),_:1}),t(" taxon id's as input. The source of this input can be command line arguments, a file, or "),$,t(". If input is supplied using multiple sources at the same time, the order of priority as described above is used. ")]),C,T,v,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy 817 329854 "),S,t("taxon_id,taxon_name,taxon_rank "),E,t("817,Bacteroides fragilis,species "),U,t("329854,Bacteroides intestinalis,species ")]),_:1}),L,e("p",null,[t(" Use the "),o(d,{to:"#options",router:""},{default:l(()=>[t("--input parameter")]),_:1}),t(" to specify a file to use as input. If input is supplied using a file, a single peptide per line is expected. ")]),A,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),q,t("817 "),N,t("329854 "),P,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy --input input.txt "),V,t("taxon_id,taxon_name,taxon_rank "),j,t("817,Bacteroides fragilis,species "),D,t("329854,Bacteroides intestinalis,species ")]),_:1}),F,e("p",null,[t(" If the command is run without arguments and no file is specified, "),o(s,null,{default:l(()=>[t("unipept taxonomy")]),_:1}),t(" will read its input from "),R,t(". When "),H,t(" is used, a single peptide per line is expected. ")]),W,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),O,t("817 "),Y,t("329854 "),z,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input | unipept taxonomy "),G,t("taxon_id,taxon_name,taxon_rank "),J,t("817,Bacteroides fragilis,species "),K,t("329854,Bacteroides intestinalis,species ")]),_:1})]),_:1}),o(_,{id:"output",title:"Output",class:"mt-5","large-title":""},{default:l(()=>[e("p",null,[t(" The "),o(s,null,{default:l(()=>[t("unipept taxonomy")]),_:1}),t(" command outputs taxonomic information for a given list of taxon id's. By default, the taxon name and taxonomic rank of each taxon id are returned. By using the "),o(d,{to:"#options",router:""},{default:l(()=>[t("--all parameter")]),_:1}),t(", this can be supplemented with the full taxonomic lineage of each taxon. Consult the "),o(d,{to:"/apidocs/taxa2tree",router:""},{default:l(()=>[o(u,null,{default:l(()=>[t("API")]),_:1}),t(" documentation")]),_:1}),t(" for a detailed list of output fields. A selection of output fields can be specified with the "),o(d,{to:"#options",router:""},{default:l(()=>[t("--select parameter")]),_:1}),t(". By default, output is generated in csv format. By using the "),o(d,{to:"#options",router:""},{default:l(()=>[t("--format parameter")]),_:1}),t(", the format can be changed into json or xml. The output can be written to a file or to "),M,t(". ")]),Q,e("p",null,[t(" Use the "),o(d,{to:"#options",router:""},{default:l(()=>[t("--output parameter")]),_:1}),t(" to specify an output file. If the file aready exists, the output will be appended to the end of the file. ")]),X,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy --output output.txt 817 329854 "),Z,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat output.txt "),tt,t("taxon_id,taxon_name,taxon_rank "),et,t("817,Bacteroides fragilis,species "),nt,t("329854,Bacteroides intestinalis,species ")]),_:1}),lt,e("p",null,[t(" If no output file is specified, "),o(s,null,{default:l(()=>[t("unipept taxonomy")]),_:1}),t(" will write its output to "),ot,t(". ")]),at,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy 817 329854 "),st,t("taxon_id,taxon_name,taxon_rank "),it,t("817,Bacteroides fragilis,species "),ut,t("329854,Bacteroides intestinalis,species "),dt,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy 817 329854 > output.txt "),rt,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat output.txt "),_t,t("taxon_id,taxon_name,taxon_rank "),pt,t("817,Bacteroides fragilis,species "),ct,t("329854,Bacteroides intestinalis,species ")]),_:1})]),_:1}),o(_,{id:"fasta",title:"Fasta support",class:"mt-5","large-title":""},{default:l(()=>[e("p",null,[t(" The "),o(s,null,{default:l(()=>[t("unipept taxonomy")]),_:1}),t(" command supports input (from any source) in a fasta-like format (for example generated by the "),o(d,{to:"/clidocs/prot2pept",router:""},{default:l(()=>[t("prot2pept command")]),_:1}),t("). This format consists of a fasta header (a line starting with a >), followed by one or more lines containing one peptide each. When this format is detected, the output will automatically include an extra information field containing the corresponding fasta header. ")]),ht,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),ft,t("> header 1 "),mt,t("817 "),xt,t("329854 "),bt,t("> header 2 "),yt,t("817 "),gt,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept pept2lca --input input.txt "),Bt,t("fasta_header,taxon_id,taxon_name,taxon_rank "),wt,t("> header 1,817,Bacteroides fragilis,species "),kt,t("> header 1,329854,Bacteroides intestinalis,species "),It,t("> header 2,817,Bacteroides fragilis,species ")]),_:1})]),_:1}),o(_,{id:"options",title:"Command-line options",class:"mt-5","large-title":""},{default:l(()=>[$t,e("p",null,[t(" All Unipept "),o(u,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands can process input from 3 sources: command line arguments, a file, or "),Ct,t(". The optional "),o(s,null,{default:l(()=>[t("--input")]),_:1}),t(" option allows you to specify an input file. The file should contain a single peptide per line. ")]),Tt,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat input.txt "),vt,t("817 "),St,t("329854 "),Et,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),Ut,t(" input.txt "),Lt,t("taxon_id,taxon_name,taxon_rank "),At,t("817,Bacteroides fragilis,species "),qt,t("329854,Bacteroides intestinalis,species ")]),_:1}),Nt,e("p",null,[t(" By default, the unipept commands write their output to "),Pt,t(". Using the optional "),o(s,null,{default:l(()=>[t("--output")]),_:1}),t(" option allows you to specify a file to write the output to. If the file already exists, the output will be appended; if it doesn't, a new file will be created. ")]),Vt,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),jt,t(" output.txt 817 329854 "),Dt,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" cat output.txt "),Ft,t("taxon_id,taxon_name,taxon_rank "),Rt,t("817,Bacteroides fragilis,species "),Ht,t("329854,Bacteroides intestinalis,species ")]),_:1}),Wt,e("p",null,[t(" By default, the Unipept "),o(u,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands output all information fields received from the Unipept server. The "),o(s,null,{default:l(()=>[t("--select")]),_:1}),t(" option allows you to control which fields are returned. A list of fields can be specified by a comma-separated list, or by using multiple "),o(s,null,{default:l(()=>[t("--select")]),_:1}),t(" options. A "),Ot,t(" can be used as a wildcard for field names. For example, "),o(s,null,{default:l(()=>[t("--select peptide,taxon*")]),_:1}),t(" will return the peptide field and all fields starting with taxon. ")]),Yt,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),zt,t(" taxon_id,taxon_name 817 329854 "),Gt,t("taxon_id,taxon_name "),Jt,t("817,Bacteroides fragilis "),Kt,t("329854,Bacteroides intestinalis "),Mt,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),Qt,t(" taxon_id "),Xt,t(" *rank 817 329854 "),Zt,t("taxon_id,taxon_rank "),te,t("817,species "),ee,t("329854,species ")]),_:1}),ne,e("p",null,[t(" By default, the Unipept "),o(u,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands return their output in json format. The "),o(s,null,{default:l(()=>[t("--format")]),_:1}),t(" option allows you to select another format. Supported formats are csv, json and xml. ")]),le,o(i,{style:{"padding-bottom":"16px","white-space":"pre"}},{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),oe,t(" json 817 329854 "),ae,t('[{"taxon_id":817,"taxon_name":"Bacteroides fragilis","taxon_rank":"species"},{"taxon_id":329854,"taxon_name":"Bacteroides intestinalis","taxon_rank":"species"}] '),se,o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),ie,t(" xml 817 329854 "),ue,t(b(xe))]),_:1}),de,e("p",null,[t(" By default, the Unipept "),o(u,null,{default:l(()=>[t("CLI")]),_:1}),t(" commands only request basic information from the Unipept server. By using the "),o(s,null,{default:l(()=>[t("--all")]),_:1}),t(" flag, you can request additional information fields such as the lineage of the returned taxa. You can use the "),o(s,null,{default:l(()=>[t("--select")]),_:1}),t(" option to select which fields are included in the output. ")]),o(p,{title:"Performance penalty"},{default:l(()=>[e("p",null,[t(" Setting "),o(s,null,{default:l(()=>[t("--all")]),_:1}),t(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1}),re,o(i,null,{default:l(()=>[o(a,null,{default:l(()=>[t("$")]),_:1}),t(" unipept taxonomy "),_e,t(" --select taxon_id,order* 817 329854 "),pe,t("taxon_id,order_id,order_name "),ce,t("817,171549,Bacteroidales "),he,t("329854,171549,Bacteroidales ")]),_:1}),fe,me]),_:1})]),_:1})}}});const Ee=w(be,[["__scopeId","data-v-5bb7ba8a"]]);export{Ee as default};
