import{d as k,i as s,j as P,o as S,c as q,w as l,l as C,bx as R,g as n,a as t,b as e,K as j,p as U,q as A}from"./index-fa2d734a.js";import{H as x}from"./HeaderBodyCard-f3b47b61.js";import{I as a}from"./InlineCode-b941903d.js";import{I as o}from"./Initialism-25eec5f3.js";import{S as V}from"./StaticAlert-03392fb6.js";import{E as p,T as N}from"./TryItCard-25724df8.js";import{R as u}from"./ResourceLink-82ddf6bf.js";import{V as z}from"./VDivider-7dfa9365.js";import{V as O}from"./VTable-b3c64698.js";import{a as H,V as g}from"./VRow-781382bd.js";import{V as W,a as I}from"./VTextarea-3eec484e.js";import{_ as E}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-4d112d66.js";import"./VAlert-57bda60a.js";import"./Boxed-1ca540a2.js";import"./VField-f756959d.js";import"./forwardRefs-e2994a01.js";const i=f=>(U("data-v-2528cd7e"),f=f(),A(),f),X={class:"font-weight-light"},D=i(()=>n("h3",{class:"font-weight-light"}," Returns the taxonomic information for a given taxon identifier. ",-1)),G=i(()=>n("h3",{class:"font-weight-medium"}," input ",-1)),M=i(()=>n("h3",{class:"font-weight-medium"}," extra ",-1)),K=i(()=>n("h3",{class:"font-weight-medium"}," names ",-1)),L={class:"my-3"},J={class:"multi-column my-3"},F={class:"multi-column mt-3"},Q=i(()=>n("thead",null,[n("tr",null,[n("th",{class:"text-start"}," Name "),n("th",{class:"text-start"}," Description ")])],-1)),Y=i(()=>n("tr",null,[n("td",null,[n("b",null,"Input[]"),n("br"),n("i",{style:{"font-size":"85%"}},"required")]),n("td",{class:"py-3"},[e(" Taxon identifier to search for. Add multiple parameters to search for multiple taxon identifiers. "),n("br"),n("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: string ")])],-1)),Z=i(()=>n("td",null,[n("b",null,"extra"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),$={class:"py-3"},ee=i(()=>n("br",null,null,-1)),le={class:"mt-3",style:{"font-size":"85%"}},te=i(()=>n("td",null,[n("b",null,"names"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),ne={class:"py-3"},ae=i(()=>n("br",null,null,-1)),ie={class:"mt-3",style:{"font-size":"85%"}},oe=i(()=>n("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1)),ue=i(()=>n("i",null,"Bacteroides fragilis",-1)),se=i(()=>n("i",null,"Bacteroides fragilis",-1)),re=i(()=>n("i",null,"Bacteroides intestinalis",-1)),de=i(()=>n("i",null,"Bacteroides fragilis",-1)),me=i(()=>n("i",null,"Bacteroides fragilis",-1)),fe=i(()=>n("h3",{class:"font-weight-medium"}," Input[] ",-1)),pe=i(()=>n("h3",{class:"font-weight-medium"}," Parameters ",-1)),_e=k({__name:"APITaxonomyPage",setup(f){const d=new R,y=s({}),b=s({}),w=s({}),v=s({}),_=s(""),c=s(!1),h=s(!1),T=s({}),B=async()=>{T.value=await d.taxonomy(_.value.split(`
`),c.value,h.value)};return P(async()=>{y.value=await d.taxonomy(["817"]),b.value=await d.taxonomy(["817","329854"]),w.value=await d.taxonomy(["817"],!0,void 0),v.value=await d.taxonomy(["817"],!0,!0)}),(ce,r)=>(S(),q(C,null,{default:l(()=>[n("h1",X,[t(o,null,{default:l(()=>[e("POST")]),_:1}),e(" /api/v1/taxonomy ")]),D,t(z,{class:"my-2"}),n("p",null,[e(" This method returns the taxonomic information from the Unipept Taxonomy, for a given "),t(o,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxon identifier. ")]),t(x,{id:"request",title:"Request","large-title":""},{default:l(()=>[n("p",null,[e(" The taxonomy method can be used by doing a "),t(o,null,{default:l(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),t(o,null,{default:l(()=>[e("GET")]),_:1}),e("-request to "),t(a,null,{default:l(()=>[e("https://api.unipept.ugent.be/api/v1/taxonomy")]),_:1}),e(". "),t(u,{to:"#parameters",router:""},{default:l(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),t(o,null,{default:l(()=>[e("POST")]),_:1}),e(") or in the query string ("),t(o,null,{default:l(()=>[e("GET")]),_:1}),e("). The only required parameter is "),t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),G,n("p",null,[t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes one or more taxon identifiers. Unipept will return the taxonomic information for the given taxa. To pass multiple taxon identifiers, simply add multiple "),t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(" parameters (see "),t(u,{to:"#example2",router:""},{default:l(()=>[e("example")]),_:1}),e("). ")]),t(V,{title:"Input size"},{default:l(()=>[n("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),t(o,null,{default:l(()=>[e("GET")]),_:1}),e("-request, exceed the maximum "),t(o,null,{default:l(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),M,n("p",null,[t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When the parameter is set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", Unipept will return the complete lineage for each taxon. See the "),t(u,{to:"#response",router:""},{default:l(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),K,n("p",null,[t(a,null,{default:l(()=>[e("names")]),_:1}),e(" is an optional parameter and can either be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When both "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" and "),t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" are set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", Unipept will return the names of all ranks in the lineage of each organism. Setting only "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" will not result in additional information fields being returned. See the "),t(u,{to:"#response",router:""},{default:l(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),t(V,{title:"Performance penalty"},{default:l(()=>[n("p",null,[e(" Setting "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),t(x,{id:"response",title:"Response",class:"mt-5"},{default:l(()=>[e(" The organisms associated with the given taxon identifiers are returned as a list of "),t(o,null,{default:l(()=>[e("JSON")]),_:1}),e(" objects. By default, each object contains the following information fields extracted from the UniProt entry and "),t(o,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxonomy: "),n("ul",L,[n("li",null,[t(a,null,{default:l(()=>[e("taxon_id")]),_:1}),e(": the "),t(o,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxon id of the taxonomic lowest common ancestor")]),n("li",null,[t(a,null,{default:l(()=>[e("taxon_name")]),_:1}),e(": the name of the taxonomic lowest common ancestor")]),n("li",null,[t(a,null,{default:l(()=>[e("taxon_rank")]),_:1}),e(": the taxonomic rank of the taxonomic lowest common ancestor")])]),e(" When the "),t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" parameter is set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", the object contains additional information about the lineage of the organisms extracted from the "),t(o,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxonomy. The taxon id of each rank in the lineage is specified using the following information fields: "),n("ul",J,[n("li",null,[t(a,null,{default:l(()=>[e("superkingdom_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("kingdom_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subkingdom_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superphylum_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("phylum_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subphylum_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superclass_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("class_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subclass_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraclass_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superorder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("order_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("suborder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraorder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("parvorder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superfamily_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("family_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subfamily_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("tribe_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subtribe_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("genus_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subgenus_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_group_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_subgroup_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subspecies_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("varietas_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("forma_id")]),_:1})])]),e(" When both the "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" and "),t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" parameters are set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", objects also contain the names for each rank in the lineage using the following information fields: "),n("ul",F,[n("li",null,[t(a,null,{default:l(()=>[e("superkingdom_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("kingdom_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subkingdom_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superphylum_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("phylum_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subphylum_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superclass_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("class_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subclass_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraclass_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superorder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("order_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("suborder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraorder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("parvorder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superfamily_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("family_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subfamily_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("tribe_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subtribe_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("genus_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subgenus_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_group_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_subgroup_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subspecies_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("varietas_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("forma_name")]),_:1})])])]),_:1}),t(x,{id:"parameters",title:"Parameters",class:"mt-5"},{default:l(()=>[t(O,null,{default:l(()=>[Q,n("tbody",null,[Y,n("tr",null,[Z,n("td",$,[e(" Return additional lineage information fields if "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(". "),ee,n("div",le,[e(" Value: Must be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(" (default) ")])])]),n("tr",null,[te,n("td",ne,[e(" Return names of ranks in the lineage if "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(". "),ae,n("div",ie,[e(" Value: Must be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),oe,t(p,{title:"Retrieve taxonomic information for a given taxon identifier",response:y.value},{description:l(()=>[e(" This example retrieves taxonomic information for the organism "),ue,e(" (taxon id "),t(u,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e("). ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxonomy -d 'input[]=817' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxonomy.json?input[]=817 ")]),_:1},8,["response"]),t(p,{id:"example2",class:"mt-5",title:"Retrieve taxonomic information for a given list of taxon identifiers",response:b.value},{description:l(()=>[e(" This example retrieves taxonomic information for the organism "),se,e(" (taxon id "),t(u,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e(") and "),re,e(" (taxon id "),t(u,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:l(()=>[e("329854")]),_:1}),e("). ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2lca -d 'input[]=817' -d 'input[]=329854' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxa2lca.json?input[]=817&input[]=329854 ")]),_:1},8,["response"]),t(p,{class:"mt-5",title:"Retrieve taxonomic information for a given taxon identifier including its complete lineage",response:w.value},{description:l(()=>[e(" This example retrieves taxonomic information for the organism "),de,e(" (taxon id "),t(u,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e("), including its complete lineage. ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxonomy -d 'input[]=817' -d 'extra=true' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxonomy.json?input[]=817&extra=true ")]),_:1},8,["response"]),t(p,{class:"mt-5",title:"Retrieve taxonomic information for a given taxon identifier including its complete lineage and names",response:v.value},{description:l(()=>[e(" This example retrieves taxonomic information for the organism "),me,e(" (taxon id "),t(u,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e("), including its complete lineage with names. ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxonomy -d 'input[]=817' -d 'extra=true' -d 'names=true' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxonomy.json?input[]=817&extra=true&names=true ")]),_:1},8,["response"]),t(N,{id:"try",class:"mt-5",response:T.value,command:"taxonomy"},{default:l(()=>[t(H,null,{default:l(()=>[t(g,{cols:"12"},{default:l(()=>[fe,t(W,{modelValue:_.value,"onUpdate:modelValue":r[0]||(r[0]=m=>_.value=m),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),t(g,{cols:"12",class:"dark-label"},{default:l(()=>[pe,t(I,{modelValue:c.value,"onUpdate:modelValue":r[1]||(r[1]=m=>c.value=m),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),t(I,{modelValue:h.value,"onUpdate:modelValue":r[2]||(r[2]=m=>h.value=m),color:"primary",inset:"",label:"names",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),t(g,{cols:"12"},{default:l(()=>[t(j,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:B},{default:l(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});const je=E(_e,[["__scopeId","data-v-2528cd7e"]]);export{je as default};
