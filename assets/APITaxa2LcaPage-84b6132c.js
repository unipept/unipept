import{d as B,i as s,j as k,o as C,c as P,w as l,l as q,bx as S,g as n,a as t,b as e,K as R,p as j,q as U}from"./index-fa2d734a.js";import{H as h}from"./HeaderBodyCard-f3b47b61.js";import{I as a}from"./InlineCode-b941903d.js";import{I as u}from"./Initialism-25eec5f3.js";import{S as T}from"./StaticAlert-03392fb6.js";import{E as x,T as N}from"./TryItCard-25724df8.js";import{R as o}from"./ResourceLink-82ddf6bf.js";import{V as z}from"./VDivider-7dfa9365.js";import{V as A}from"./VTable-b3c64698.js";import{a as L,V as w}from"./VRow-781382bd.js";import{V as O,a as I}from"./VTextarea-3eec484e.js";import{_ as W}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-4d112d66.js";import"./VAlert-57bda60a.js";import"./Boxed-1ca540a2.js";import"./VField-f756959d.js";import"./forwardRefs-e2994a01.js";const i=c=>(j("data-v-ead4c298"),c=c(),U(),c),E={class:"font-weight-light"},H=i(()=>n("h3",{class:"font-weight-light"}," Returns the taxonomic lowest common ancestor for a given list of taxon identifiers. ",-1)),D=i(()=>n("h3",{class:"font-weight-medium"}," input ",-1)),G=i(()=>n("h3",{class:"font-weight-medium"}," extra ",-1)),M=i(()=>n("h3",{class:"font-weight-medium"}," names ",-1)),X={class:"my-3"},K={class:"multi-column my-3"},J={class:"multi-column mt-3"},F=i(()=>n("thead",null,[n("tr",null,[n("th",{class:"text-start"}," Name "),n("th",{class:"text-start"}," Description ")])],-1)),Q=i(()=>n("tr",null,[n("td",null,[n("b",null,"Input[]"),n("br"),n("i",{style:{"font-size":"85%"}},"required")]),n("td",{class:"py-3"},[e(" List of taxon identifiers to calculate the lowest common ancestor for. Add multiple parameters to specify multiple taxon id's. "),n("br"),n("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: integer ")])],-1)),Y=i(()=>n("td",null,[n("b",null,"extra"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),Z={class:"py-3"},$=i(()=>n("br",null,null,-1)),ee={class:"mt-3",style:{"font-size":"85%"}},le=i(()=>n("td",null,[n("b",null,"names"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1)),te={class:"py-3"},ne=i(()=>n("br",null,null,-1)),ae={class:"mt-3",style:{"font-size":"85%"}},ie=i(()=>n("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1)),oe=i(()=>n("i",null,"Bacteroides fragilis",-1)),ue=i(()=>n("i",null,"Bacteroides intestinalis",-1)),se=i(()=>n("i",null,"Coprobacter fastidiosus",-1)),de=i(()=>n("i",null,"Bacteroides fragilis",-1)),re=i(()=>n("i",null,"Bacteroides intestinalis",-1)),ce=i(()=>n("i",null,"Coprobacter fastidiosus",-1)),me=i(()=>n("i",null,"Bacteroides fragilis",-1)),fe=i(()=>n("i",null,"Bacteroides intestinalis",-1)),_e=i(()=>n("i",null,"Coprobacter fastidiosus",-1)),pe=i(()=>n("h3",{class:"font-weight-medium"}," Input[] ",-1)),he=i(()=>n("h3",{class:"font-weight-medium"}," Parameters ",-1)),xe=B({__name:"APITaxa2LcaPage",setup(c){const m=new S,g=s({}),b=s({}),y=s({}),f=s(""),_=s(!1),p=s(!1),v=s({}),V=async()=>{v.value=await m.taxa2lca(f.value.split(`
`),_.value,p.value)};return k(async()=>{g.value=await m.taxa2lca(["817","329854","1099853"]),b.value=await m.taxa2lca(["817","329854","1099853"],!0,void 0),y.value=await m.taxa2lca(["817","329854","1099853"],!0,!0)}),(we,d)=>(C(),P(q,null,{default:l(()=>[n("h1",E,[t(u,null,{default:l(()=>[e("POST")]),_:1}),e(" /api/v1/taxa2lca ")]),H,t(z,{class:"my-2"}),n("p",null,[e(" This method calculates and returns the taxonomic lowest common ancestor for a given list of "),t(u,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxon identifiers. ")]),t(h,{id:"request",title:"Request","large-title":""},{default:l(()=>[n("p",null,[e(" The taxa2lca method can be used by doing a "),t(u,null,{default:l(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),t(u,null,{default:l(()=>[e("GET")]),_:1}),e("-request to "),t(a,null,{default:l(()=>[e("https://api.unipept.ugent.be/api/v1/taxa2lca")]),_:1}),e(". "),t(o,{to:"#parameters",router:""},{default:l(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),t(u,null,{default:l(()=>[e("POST")]),_:1}),e(") or in the query string ("),t(u,null,{default:l(()=>[e("GET")]),_:1}),e("). The only required parameter is "),t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),D,n("p",null,[t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes at least two taxon identifiers. Unipept will calculate and return the taxonomic lowest common ancestor of the given taxa. To pass multiple taxon identifiers, simply add multiple "),t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(" parameters (see "),t(o,{to:"#example",router:""},{default:l(()=>[e("example")]),_:1}),e("). ")]),t(T,{title:"Input size"},{default:l(()=>[n("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),t(a,null,{default:l(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),t(u,null,{default:l(()=>[e("GET")]),_:1}),e("-request, exceed the maximum "),t(u,null,{default:l(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),G,n("p",null,[t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When the parameter is set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", Unipept will return the complete lineage of the taxonomic lowest common ancestor. See the "),t(o,{to:"#response",router:""},{default:l(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),M,n("p",null,[t(a,null,{default:l(()=>[e("names")]),_:1}),e(" is an optional parameter and can either be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(". When both "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" and "),t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" are set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", Unipept will return the names of all ranks in the lineage of the taxonomic lowest common ancestor. Setting only "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" will not result in additional information fields being returned. See the "),t(o,{to:"#response",router:""},{default:l(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),t(T,{title:"Performance penalty"},{default:l(()=>[n("p",null,[e(" Setting "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),t(h,{id:"response",title:"Response",class:"mt-5","large-title":""},{default:l(()=>[e(" The taxonomic lowest common ancestor for the given list of taxon identifiers is returned as a "),t(u,null,{default:l(()=>[e("JSON")]),_:1}),e(" object. By default, the object contains the following information fields extracted from the "),t(u,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxonomy: "),n("ul",X,[n("li",null,[t(a,null,{default:l(()=>[e("taxon_id")]),_:1}),e(": the "),t(u,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxon id of the taxonomic lowest common ancestor")]),n("li",null,[t(a,null,{default:l(()=>[e("taxon_name")]),_:1}),e(": the name of the taxonomic lowest common ancestor")]),n("li",null,[t(a,null,{default:l(()=>[e("taxon_rank")]),_:1}),e(": the taxonomic rank of the taxonomic lowest common ancestor")])]),e(" When the "),t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" parameter is set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", the object contains additional information about the lineage of the taxonomic lowest common ancestor extracted from the "),t(u,null,{default:l(()=>[e("NCBI")]),_:1}),e(" taxonomy. The taxon id of each rank in the lineage is specified using the following information fields: "),n("ul",K,[n("li",null,[t(a,null,{default:l(()=>[e("superkingdom_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("kingdom_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subkingdom_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superphylum_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("phylum_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subphylum_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superclass_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("class_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subclass_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraclass_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superorder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("order_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("suborder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraorder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("parvorder_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superfamily_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("family_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subfamily_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("tribe_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subtribe_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("genus_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subgenus_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_group_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_subgroup_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subspecies_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("varietas_id")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("forma_id")]),_:1})])]),e(" When both the "),t(a,null,{default:l(()=>[e("names")]),_:1}),e(" and "),t(a,null,{default:l(()=>[e("extra")]),_:1}),e(" parameters are set to "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(", objects also contain the names for each rank in the lineage using the following information fields: "),n("ul",J,[n("li",null,[t(a,null,{default:l(()=>[e("superkingdom_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("kingdom_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subkingdom_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superphylum_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("phylum_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subphylum_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superclass_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("class_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subclass_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraclass_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superorder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("order_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("suborder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("infraorder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("parvorder_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("superfamily_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("family_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subfamily_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("tribe_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subtribe_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("genus_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subgenus_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_group_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_subgroup_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("species_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("subspecies_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("varietas_name")]),_:1})]),n("li",null,[t(a,null,{default:l(()=>[e("forma_name")]),_:1})])])]),_:1}),t(h,{id:"parameters",title:"Parameters",class:"mt-5","large-title":""},{default:l(()=>[t(A,null,{default:l(()=>[F,n("tbody",null,[Q,n("tr",null,[Y,n("td",Z,[e(" Return additional lineage information fields if "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(". "),$,n("div",ee,[e(" Value: Must be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(" (default) ")])])]),n("tr",null,[le,n("td",te,[e(" Return names of ranks in the lineage if "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(". "),ne,n("div",ae,[e(" Value: Must be "),t(a,null,{default:l(()=>[e("true")]),_:1}),e(" or "),t(a,null,{default:l(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),ie,t(x,{id:"example",title:"Calculate the taxonomic lowest common ancestor for a given list of taxon identifiers",response:g.value},{description:l(()=>[e(" This example calculates and retrieves the taxonomic lowest common ancestor of "),oe,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e("), "),ue,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:l(()=>[e("329854")]),_:1}),e(") and "),se,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=1099853"},{default:l(()=>[e("1099853")]),_:1}),e("). ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2lca -d 'input[]=817' -d 'input[]=329854' -d 'input[]=1099853' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxa2lca.json?input[]=817&input[]=329854&input[]=1099853 ")]),_:1},8,["response"]),t(x,{class:"mt-5",title:"Retrieve the taxonomic lowest common ancestor and its lineage for a given list of taxon identifiers",response:b.value},{description:l(()=>[e(" This example calculates and retrieves the taxonomic lowest common ancestor of "),de,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e("), "),re,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:l(()=>[e("329854")]),_:1}),e(") and "),ce,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=1099853"},{default:l(()=>[e("1099853")]),_:1}),e("), including its complete lineage. ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2lca -d 'input[]=817' -d 'input[]=329854' -d 'input[]=1099853' -d 'extra=true' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxa2lca.json?input[]=817&input[]=329854&input[]=1099853&extra=true ")]),_:1},8,["response"]),t(x,{class:"mt-5",title:"Retrieve all UniProt entries containing a single tryptic peptide, while equating I and L",response:y.value},{description:l(()=>[e(" This example calculates and retrieves the taxonomic lowest common ancestor of "),me,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=817"},{default:l(()=>[e("817")]),_:1}),e("), "),fe,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=329854"},{default:l(()=>[e("329854")]),_:1}),e(") and "),_e,e(" (taxon id "),t(o,{to:"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=1099853"},{default:l(()=>[e("1099853")]),_:1}),e("), including its complete lineage with names. ")]),post:l(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/taxa2lca -d 'input[]=817' -d 'input[]=329854' -d 'input[]=1099853' -d 'extra=true' -d 'names=true' ")]),get:l(()=>[e(" https://api.unipept.ugent.be/api/v1/taxa2lca.json?input[]=817&input[]=329854&input[]=1099853&extra=true&names=true ")]),_:1},8,["response"]),t(N,{id:"try",class:"mt-5",response:v.value,command:"taxa2lca"},{default:l(()=>[t(L,null,{default:l(()=>[t(w,{cols:"12"},{default:l(()=>[pe,t(O,{modelValue:f.value,"onUpdate:modelValue":d[0]||(d[0]=r=>f.value=r),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),t(w,{cols:"12",class:"dark-label"},{default:l(()=>[he,t(I,{modelValue:_.value,"onUpdate:modelValue":d[1]||(d[1]=r=>_.value=r),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),t(I,{modelValue:p.value,"onUpdate:modelValue":d[2]||(d[2]=r=>p.value=r),color:"primary",inset:"",label:"equate_il",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),t(w,{cols:"12"},{default:l(()=>[t(R,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:V},{default:l(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});const ze=W(xe,[["__scopeId","data-v-ead4c298"]]);export{ze as default};
