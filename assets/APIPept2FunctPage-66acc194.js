import{d as T,i as s,j as V,o as x,c as R,w as t,l as C,bx as L,g as n,a as l,b as e,K as O}from"./index-eea28a33.js";import{H as _}from"./HeaderBodyCard-3295d4c5.js";import{I as a}from"./InlineCode-67d03729.js";import{I as i}from"./Initialism-440d96b0.js";import{S as I}from"./StaticAlert-5833da9d.js";import{E as p,T as D}from"./TryItCard-91655383.js";import{R as d}from"./ResourceLink-d34b4283.js";import{V as q}from"./VDivider-834b9f8e.js";import{V as Y}from"./VTable-9d8ead1f.js";import{a as j,V as A}from"./VRow-94e3f3e6.js";import{V as G,a as b}from"./VTextarea-ac294625.js";import"./VCard-9d59c194.js";import"./_plugin-vue_export-helper-c27b6911.js";import"./VAlert-6315e811.js";import"./Boxed-9f9dd66a.js";import"./VField-cc36921e.js";import"./forwardRefs-e2994a01.js";const K={class:"font-weight-light"},Q={class:"font-weight-light"},k=n("h3",{class:"font-weight-medium"}," input ",-1),U=n("h3",{class:"font-weight-medium"}," equate_il ",-1),z=n("i",null,"Equate I and L",-1),H=n("h3",{class:"font-weight-medium"}," extra ",-1),N=n("h3",{class:"font-weight-medium"}," domains ",-1),B={class:"mb-2"},W={class:"my-3"},X=n("thead",null,[n("tr",null,[n("th",{class:"text-start"}," Name "),n("th",{class:"text-start"}," Description ")])],-1),J=n("tr",null,[n("td",null,[n("b",null,"Input[]"),n("br"),n("i",{style:{"font-size":"85%"}},"required")]),n("td",{class:"py-3"},[e(" Tryptic peptide to search for. Add multiple parameters to search for multiple peptides. "),n("br"),n("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: string ")])],-1),M=n("td",null,[n("b",null,"equate_il"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1),F={class:"py-3"},Z=n("br",null,null,-1),$={class:"mt-3",style:{"font-size":"85%"}},ee=n("td",null,[n("b",null,"extra"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1),te={class:"py-3"},le=n("br",null,null,-1),ne={class:"mt-3",style:{"font-size":"85%"}},ae=n("td",null,[n("b",null,"domains"),n("br"),n("i",{style:{"font-size":"85%"}},"optional")],-1),ie={class:"py-3"},se=n("br",null,null,-1),ue={class:"mt-3",style:{"font-size":"85%"}},re=n("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1),oe=n("h3",{class:"font-weight-medium"}," Input[] ",-1),pe=n("h3",{class:"font-weight-medium"}," Parameters ",-1),Re=T({__name:"APIPept2FunctPage",setup(de){const o=new L,y=s({}),P=s({}),w=s({}),g=s({}),v=s({}),c=s(""),h=s(!1),f=s(!1),m=s(!1),E=s({}),S=async()=>{E.value=await o.pept2funct(c.value.split(`
`),h.value,f.value,m.value)};return V(async()=>{y.value=await o.pept2funct(["AIPQLEVARPADAYETAEAYR"]),P.value=await o.pept2funct(["AIPQLEVARPADAYETAEAYR","APVLSDSSCK"]),w.value=await o.pept2funct(["APVLSDSSCK"],!0,void 0,void 0),g.value=await o.pept2funct(["AIPQLEVARPADAYETAEAYR"],void 0,!0,void 0),v.value=await o.pept2funct(["APVLSDSSCK"],void 0,void 0,!0)}),(ce,u)=>(x(),R(C,null,{default:t(()=>[n("h1",K,[l(i,null,{default:t(()=>[e("POST")]),_:1}),e(" /api/v1/pept2funct ")]),n("h3",Q,[e(" Returns the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with a given tryptic peptide. ")]),l(q,{class:"my-2"}),n("p",null,[e(" This method returns the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with a given tryptic peptide. This is the same information as provided when performing a search with the "),l(d,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),l(_,{id:"request",title:"Request","large-title":""},{default:t(()=>[n("p",null,[e(" The pept2funct method can be used by doing a "),l(i,null,{default:t(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("-request to"),l(a,null,{default:t(()=>[e("https://api.unipept.ugent.be/api/v1/pept2funct")]),_:1}),e(". "),l(d,{to:"#parameters",router:""},{default:t(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),l(i,null,{default:t(()=>[e("POST")]),_:1}),e(") or in the query string ("),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("). The only required parameter is "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),k,n("p",null,[l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes one or more tryptic peptides. Unipept will return the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with each of the "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" peptides based on their occurrence in UniProt entries. To pass multiple peptides at once, simply add multiple "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameters (see "),l(d,{to:"#example2",router:""},{default:t(()=>[e("example")]),_:1}),e("). ")]),l(I,{title:"Input size"},{default:t(()=>[n("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),l(a,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),l(i,null,{default:t(()=>[e("GET")]),_:1}),e("-request, exceed the maximum "),l(i,null,{default:t(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),U,n("p",null,[l(a,null,{default:t(()=>[e("equate_il")]),_:1}),e(" is an optional parameter and can either be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", isoleucine (I) and leucine (L) are equated when matching tryptic peptides to UniProt entries. This setting is similar to checking the "),z,e(" checkbox when performing a search with the "),l(d,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),H,n("p",null,[l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will also return the name associated with a"),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term and an "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number and the name and type associated with an InterPro entry. See the "),l(d,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),N,n("p",null,[l(a,null,{default:t(()=>[e("domains")]),_:1}),e(" is an optional parameter that can be used to order the "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms in groups according to their namespace (cellular component, molecular function, biological process). ")]),l(I,{title:"Performance penalty"},{default:t(()=>[n("p",null,[e(" Setting "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("domains")]),_:1}),e(" to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),l(_,{id:"response",title:"Response",class:"mt-5","large-title":""},{default:t(()=>[n("p",B,[e(" A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects is returned. By default, each object contains the following information fields: "),n("ul",W,[n("li",null,[l(a,null,{default:t(()=>[e("peptide")]),_:1}),e(": the peptide that was searched for.")]),n("li",null,[l(a,null,{default:t(()=>[e("total_protein_count")]),_:1}),e(": total amount of proteins matched with the given peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("ec")]),_:1}),e(": A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent an "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number associated with the current tryptic peptide. "),n("ul",null,[n("li",null,[l(a,null,{default:t(()=>[e("ec_number")]),_:1}),e(": "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number associated with the current tryptic peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number. ")]),n("li",null,[l(a,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])]),n("li",null,[l(a,null,{default:t(()=>[e("go")]),_:1}),e(": A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent a "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term associated with the current tryptic peptide. "),n("ul",null,[n("li",null,[l(a,null,{default:t(()=>[e("go_term")]),_:1}),e(": "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term associated with the current tryptic peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term. ")]),n("li",null,[l(a,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])]),n("li",null,[l(a,null,{default:t(()=>[e("ipr")]),_:1}),e(": A list of "),l(i,null,{default:t(()=>[e("JSON")]),_:1}),e(" objects that each represent an InterPro entry associated with the current tryptic peptide. "),n("ul",null,[n("li",null,[l(a,null,{default:t(()=>[e("code")]),_:1}),e(": InterPro entry code associated with the current tryptic peptide.")]),n("li",null,[l(a,null,{default:t(()=>[e("protein_count")]),_:1}),e(": amount of proteins matched with the given tryptic peptide that are labeled with the current InterPro code. ")]),n("li",null,[l(a,null,{default:t(()=>[e("name")]),_:1}),e(": optional, name of the InterPro entry. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")]),n("li",null,[l(a,null,{default:t(()=>[e("type")]),_:1}),e(": optional, type of the InterPro entry. Included when the "),l(a,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". ")])])])]),e(" When the "),l(a,null,{default:t(()=>[e("domains")]),_:1}),e(" parameter is set to "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(", objects are placed in a group corresponding to their namespace and the objects are nested in an additional object. See the examples for more information on how to use this. ")])]),_:1}),l(_,{id:"parameters",title:"Parameters",class:"mt-5","large-title":""},{default:t(()=>[l(Y,null,{default:t(()=>[X,n("tbody",null,[J,n("tr",null,[M,n("td",F,[e(" Equate isoleucine (I) and leucine (L). "),Z,n("div",$,[e(" Value: Must be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),n("tr",null,[ee,n("td",te,[e(" Return additional information fields if "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". "),le,n("div",ne,[e(" Value: Must be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),n("tr",null,[ae,n("td",ie,[e(" Separates "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-namespaces and InterPro types and places objects in group associated with current namespace or type when "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(". "),se,n("div",ue,[e(" Value: Must be "),l(a,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(a,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),re,l(p,{title:"Retrieve the functional ec-numbers, go-terms and InterPro entries associated with a given tryptic peptide",response:y.value},{description:t(()=>[e(" This example retrieves all functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(". The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2funct -d 'input[]=AIPQLEVARPADAYETAEAYR' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2funct.json?input[]=AIPQLEVARPADAYETAEAYR ")]),_:1},8,["response"]),l(p,{id:"example2",class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms and InterPro entries associated with each of multiple tryptic peptides",response:P.value},{description:t(()=>[e(" This example retrieves the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries for both the tryptic peptides "),n("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" and "),n("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". The result is the same as the combination of this search and this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2funct -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'input[]=APVLSDSSCK' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2funct.json?input[]=AIPQLEVARPADAYETAEAYR&input[]=APVLSDSSCK ")]),_:1},8,["response"]),l(p,{class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms and InterPro entries associated with a single tryptic peptide, while equating I and L",response:w.value},{description:t(()=>[e(" This example retrieves the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". In searching, isoleucine (I) and leucinge (L) are considered equal. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2funct -d 'input[]=APVISDSSCK' -d 'equate_il=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2funct.json?input[]=APVISDSSCK&equate_il=true ")]),_:1},8,["response"]),l(p,{class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms and InterPro entries associated with a single tryptic peptide, with extra information enabled",response:g.value},{description:t(()=>[e(" This example retrieves the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" including the name of each "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-number, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-term and the name and type of each InterPro entry. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2funct -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2funct.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true ")]),_:1},8,["response"]),l(p,{class:"mt-5",title:"Retrieve the functional ec-numbers, go-terms and InterPro entries associated with a single tryptic peptide, making a distinction between different go-domains and InterPro types",response:v.value},{description:t(()=>[e(" This example retrieves the functional "),l(i,null,{default:t(()=>[e("EC")]),_:1}),e("-numbers, "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-terms and InterPro entries associated with the tryptic peptide "),n("i",null,[l(i,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(" distributed over the distinct "),l(i,null,{default:t(()=>[e("GO")]),_:1}),e("-domains and InterPro types. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2funct -d 'input[]=APVLSDSSCK' -d 'domains=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2funct.json?input[]=APVLSDSSCK&domains=true ")]),_:1},8,["response"]),l(D,{id:"try",class:"mt-5",response:E.value,command:"pept2funct"},{default:t(()=>[l(j,null,{default:t(()=>[l(A,{cols:"12"},{default:t(()=>[oe,l(G,{modelValue:c.value,"onUpdate:modelValue":u[0]||(u[0]=r=>c.value=r),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),l(A,{cols:"12",class:"dark-label"},{default:t(()=>[pe,l(b,{modelValue:f.value,"onUpdate:modelValue":u[1]||(u[1]=r=>f.value=r),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),l(b,{modelValue:h.value,"onUpdate:modelValue":u[2]||(u[2]=r=>h.value=r),color:"primary",inset:"",label:"equate_il",density:"compact","hide-details":""},null,8,["modelValue"]),l(b,{modelValue:m.value,"onUpdate:modelValue":u[3]||(u[3]=r=>m.value=r),color:"primary",inset:"",label:"domains",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),l(A,{cols:"12"},{default:t(()=>[l(O,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:S},{default:t(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});export{Re as default};
