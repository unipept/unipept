import{d as I,i as u,j as S,o as Y,c as L,w as t,l as q,bx as D,g as a,a as l,b as e,K as U,p as k,q as C}from"./index-fa2d734a.js";import{H as A}from"./HeaderBodyCard-f3b47b61.js";import{I as n}from"./InlineCode-b941903d.js";import{I as s}from"./Initialism-25eec5f3.js";import{S as V}from"./StaticAlert-03392fb6.js";import{E as c,T as j}from"./TryItCard-25724df8.js";import{R as p}from"./ResourceLink-82ddf6bf.js";import{V as Q}from"./VDivider-7dfa9365.js";import{V as z}from"./VTable-b3c64698.js";import{a as B,V as b}from"./VRow-781382bd.js";import{V as K,a as y}from"./VTextarea-3eec484e.js";import{_ as W}from"./_plugin-vue_export-helper-c27b6911.js";import"./VCard-4d112d66.js";import"./VAlert-57bda60a.js";import"./Boxed-1ca540a2.js";import"./VField-f756959d.js";import"./forwardRefs-e2994a01.js";const i=_=>(k("data-v-b2f419ab"),_=_(),C(),_),H={class:"font-weight-light"},O=i(()=>a("h3",{class:"font-weight-light"}," Returns the set of taxa extracted from the UniProt entries containing a given tryptic peptide. ",-1)),N=i(()=>a("i",null,"Lineage table",-1)),X=i(()=>a("h3",{class:"font-weight-medium"}," input ",-1)),M=i(()=>a("h3",{class:"font-weight-medium"}," equate_il ",-1)),G=i(()=>a("i",null,"Equate I and L",-1)),F=i(()=>a("h3",{class:"font-weight-medium"}," extra ",-1)),J=i(()=>a("h3",{class:"font-weight-medium"}," names ",-1)),Z={class:"my-3"},$={class:"multi-column my-3"},ee={class:"multi-column mt-3"},te=i(()=>a("thead",null,[a("tr",null,[a("th",{class:"text-start"}," Name "),a("th",{class:"text-start"}," Description ")])],-1)),le=i(()=>a("tr",null,[a("td",null,[a("b",null,"Input[]"),a("br"),a("i",{style:{"font-size":"85%"}},"required")]),a("td",{class:"py-3"},[e(" Tryptic peptide to search for. Add multiple parameters to search for multiple peptides. "),a("br"),a("div",{class:"mt-3",style:{"font-size":"85%"}}," Value: string ")])],-1)),ae=i(()=>a("td",null,[a("b",null,"equate_il"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),ne={class:"py-3"},ie=i(()=>a("br",null,null,-1)),se={class:"mt-3",style:{"font-size":"85%"}},ue=i(()=>a("td",null,[a("b",null,"extra"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),oe={class:"py-3"},re=i(()=>a("br",null,null,-1)),de={class:"mt-3",style:{"font-size":"85%"}},pe=i(()=>a("td",null,[a("b",null,"names"),a("br"),a("i",{style:{"font-size":"85%"}},"optional")],-1)),ce={class:"py-3"},_e=i(()=>a("br",null,null,-1)),fe={class:"mt-3",style:{"font-size":"85%"}},me=i(()=>a("h2",{id:"examples",class:"font-weight-light mt-10"}," Examples ",-1)),he=i(()=>a("h3",{class:"font-weight-medium"}," Input[] ",-1)),ge=i(()=>a("h3",{class:"font-weight-medium"}," Parameters ",-1)),Ae=I({__name:"APIPept2TaxaPage",setup(_){const d=new D,P=u({}),x=u({}),v=u({}),w=u({}),T=u({}),f=u(""),m=u(!1),h=u(!1),g=u(!1),E=u({}),R=async()=>{E.value=await d.pept2taxa(f.value.split(`
`),m.value,h.value,g.value)};return S(async()=>{P.value=await d.pept2taxa(["AIPQLEVARPADAYETAEAYR"]),x.value=await d.pept2taxa(["AIPQLEVARPADAYETAEAYR","APVLSDSSCK"]),v.value=await d.pept2taxa(["APVLSDSSCK"],!0,void 0,void 0),w.value=await d.pept2taxa(["AIPQLEVARPADAYETAEAYR"],void 0,!0,void 0),T.value=await d.pept2taxa(["AIPQLEVARPADAYETAEAYR"],void 0,!0,!0)}),(be,o)=>(Y(),L(q,null,{default:t(()=>[a("h1",H,[l(s,null,{default:t(()=>[e("POST")]),_:1}),e(" /api/v1/pept2taxa ")]),O,l(Q,{class:"my-2"}),a("p",null,[e(" This method returns the set of organisms associated with the UniProt entries containing a given tryptic peptide. This is the same information as provided on the "),N,e(" tab when performing a search with the "),l(p,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),l(A,{id:"request",title:"Request","large-title":""},{default:t(()=>[a("p",null,[e(" The pept2taxa method can be used by doing a "),l(s,null,{default:t(()=>[e("HTTP POST")]),_:1}),e("-request (preferred) or "),l(s,null,{default:t(()=>[e("GET")]),_:1}),e("-request to "),l(n,null,{default:t(()=>[e("https://api.unipept.ugent.be/api/v1/pept2taxa")]),_:1}),e(". "),l(p,{to:"#parameters",router:""},{default:t(()=>[e("Parameters")]),_:1}),e(" can be included in the request body ("),l(s,null,{default:t(()=>[e("POST")]),_:1}),e(") or in the query string ("),l(s,null,{default:t(()=>[e("GET")]),_:1}),e("). The only required parameter is "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(", which takes one or more tryptic peptides. ")]),X,a("p",null,[l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" is a required parameter that takes one or more tryptic peptides. Unipept will return the set of organisms associated with the UniProt entries that contain any of the "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" peptides in their protein sequence. To pass multiple peptides at once, simply add multiple "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameters (see "),l(p,{to:"#example2",router:""},{default:t(()=>[e("example")]),_:1}),e("). ")]),l(V,{title:"Input size"},{default:t(()=>[a("p",null,[e(" Unipept puts no restrictions on the number of peptides passed to the "),l(n,null,{default:t(()=>[e("input[]")]),_:1}),e(" parameter. Keep in mind that searching for lots of peptides at once may cause the request to timeout or, in the case of a "),l(s,null,{default:t(()=>[e("GET")]),_:1}),e("-request, exceed the maximum "),l(s,null,{default:t(()=>[e("URL")]),_:1}),e(" length. When performing bulk searches, we suggest splitting the input set over requests of 100 peptides each. ")])]),_:1}),M,a("p",null,[l(n,null,{default:t(()=>[e("equate_il")]),_:1}),e(" is an optional parameter and can either be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", isoleucine (I) and leucine (L) are equated when matching tryptic peptides to UniProt entries. This setting is similar to checking the "),G,e(" checkbox when performing a search with the "),l(p,{to:"/tpa",router:""},{default:t(()=>[e("Tryptic Peptide Analysis")]),_:1}),e(" in the web interface. ")]),F,a("p",null,[l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" is an optional parameter and can either be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When the parameter is set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will return the complete lineage of each organism. See the "),l(p,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),J,a("p",null,[l(n,null,{default:t(()=>[e("names")]),_:1}),e(" is an optional parameter and can either be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When not set explicitly, the parameter defaults to "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(". When both "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" and "),l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" are set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", Unipept will return the names of all ranks in the lineage of each organism. Setting only "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" will not result in additional information fields being returned. See the "),l(p,{to:"#response",router:""},{default:t(()=>[e("response")]),_:1}),e(" section for an overview of the information fields returned. ")]),l(V,{title:"Performance penalty"},{default:t(()=>[a("p",null,[e(" Setting "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" has a performance penalty inferred from additional database queries. Do not use this parameter unless the extra information fields are needed. ")])]),_:1})]),_:1}),l(A,{id:"response",title:"Response",class:"mt-5","large-title":""},{default:t(()=>[e(" The organisms associated with matching UniProt entries are returned as a list of "),l(s,null,{default:t(()=>[e("json")]),_:1}),e(" objects. By default, each object contains the following information fields extracted from the UniProt entry and "),l(s,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxonomy: "),a("ul",Z,[a("li",null,[l(n,null,{default:t(()=>[e("peptide")]),_:1}),e(": the peptide that matched this record")]),a("li",null,[l(n,null,{default:t(()=>[e("taxon_id")]),_:1}),e(": the "),l(s,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxon id of the organism associated with the matching record")]),a("li",null,[l(n,null,{default:t(()=>[e("taxon_name")]),_:1}),e(": the name of the organism associated with the matching record")]),a("li",null,[l(n,null,{default:t(()=>[e("taxon_rank")]),_:1}),e(": the taxonomic rank of the organism associated with the matching record")])]),e(" When the "),l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" parameter is set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", objects contain additional information about the lineages of the organism extracted from the "),l(s,null,{default:t(()=>[e("NCBI")]),_:1}),e(" taxonomy. The taxon id of each rank in the lineage is specified using the following information fields: "),a("ul",$,[a("li",null,[l(n,null,{default:t(()=>[e("superkingdom_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("kingdom_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subkingdom_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superphylum_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("phylum_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subphylum_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superclass_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("class_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subclass_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraclass_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superorder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("order_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("suborder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraorder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("parvorder_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superfamily_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("family_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subfamily_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("tribe_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subtribe_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("genus_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subgenus_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_group_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_subgroup_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subspecies_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("varietas_id")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("forma_id")]),_:1})])]),e(" When both the "),l(n,null,{default:t(()=>[e("names")]),_:1}),e(" and "),l(n,null,{default:t(()=>[e("extra")]),_:1}),e(" parameters are set to "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(", objects also contain the names for each rank in the lineage using the following information fields: "),a("ul",ee,[a("li",null,[l(n,null,{default:t(()=>[e("superkingdom_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("kingdom_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subkingdom_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superphylum_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("phylum_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subphylum_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superclass_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("class_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subclass_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraclass_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superorder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("order_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("suborder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("infraorder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("parvorder_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("superfamily_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("family_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subfamily_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("tribe_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subtribe_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("genus_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subgenus_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_group_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_subgroup_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("species_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("subspecies_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("varietas_name")]),_:1})]),a("li",null,[l(n,null,{default:t(()=>[e("forma_name")]),_:1})])])]),_:1}),l(A,{id:"parameters",title:"Parameters",class:"mt-5","large-title":""},{default:t(()=>[l(z,null,{default:t(()=>[te,a("tbody",null,[le,a("tr",null,[ae,a("td",ne,[e(" Equate isoleucine (I) and leucine (L). "),ie,a("div",se,[e(" Value: Must be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),a("tr",null,[ue,a("td",oe,[e(" Return additional information fields if "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(". "),re,a("div",de,[e(" Value: Must be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])]),a("tr",null,[pe,a("td",ce,[e(" Return names of ranks in the lineage if "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(". "),_e,a("div",fe,[e(" Value: Must be "),l(n,null,{default:t(()=>[e("true")]),_:1}),e(" or "),l(n,null,{default:t(()=>[e("false")]),_:1}),e(" (default) ")])])])])]),_:1})]),_:1}),me,l(c,{title:"Retrieve all organisms associated with the UniProt entries containing a given tryptic peptide",response:P.value},{description:t(()=>[e(" This example retrieves all organisms associated with the UniProt entries containing the peptide "),a("i",null,[l(s,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(". The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2taxa -d 'input[]=AIPQLEVARPADAYETAEAYR' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2taxa.json?input[]=AIPQLEVARPADAYETAEAYR ")]),_:1},8,["response"]),l(c,{id:"example2",class:"mt-5",title:"Retrieve all organisms associated with the UniProt entries containing any of multiple tryptic peptides",response:x.value},{description:t(()=>[e(" This example retrieves all organisms associated with the UniProt entries containing the peptide "),a("i",null,[l(s,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" or "),a("i",null,[l(s,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". The result is the same as the combination of this search and this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2taxa -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'input[]=APVLSDSSCK' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2taxa.json?input[]=AIPQLEVARPADAYETAEAYR&input[]=APVLSDSSCK ")]),_:1},8,["response"]),l(c,{class:"mt-5",title:"Retrieve all organisms associated with the UniProt entries containing a single tryptic peptide, while equating I and L",response:v.value},{description:t(()=>[e(" This example retrieves all organisms associated with the UniProt entries containing the peptide "),a("i",null,[l(s,null,{default:t(()=>[e("APVLSDSSCK")]),_:1})]),e(". In searching, isoleucine (I) and leucine (L) are considered equal. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2taxa -d 'input[]=APVISDSSCK' -d 'equate_il=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2taxa.json?input[]=APVISDSSCK&equate_il=true ")]),_:1},8,["response"]),l(c,{class:"mt-5",title:"Retrieve all organisms and lineage associated with the UniProt entries containing a single tryptic peptide",response:w.value},{description:t(()=>[e(" This example retrieves all organisms associated with the UniProt entries containing the peptide "),a("i",null,[l(s,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(" including the complete lineage of these organisms. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2taxa -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2taxa.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true ")]),_:1},8,["response"]),l(c,{class:"mt-5",title:"Retrieve all organisms and lineage names associated with the UniProt entries containing a single tryptic peptide",response:T.value},{description:t(()=>[e(" This example retrieves all organisms associated with the UniProt entries containing the peptide "),a("i",null,[l(s,null,{default:t(()=>[e("AIPQLEVARPADAYETAEAYR")]),_:1})]),e(", including the complete lineage of these organisms with the names of all ranks. The result is the same as this search with the Tryptic Peptide Analysis in the web interface. ")]),post:t(()=>[e(" curl -X POST -H 'Accept: application/json' api.unipept.ugent.be/api/v1/pept2taxa -d 'input[]=AIPQLEVARPADAYETAEAYR' -d 'extra=true' -d 'names=true' ")]),get:t(()=>[e(" https://api.unipept.ugent.be/api/v1/pept2taxa.json?input[]=AIPQLEVARPADAYETAEAYR&extra=true&names=true ")]),_:1},8,["response"]),l(j,{id:"try",class:"mt-5",response:E.value,command:"pept2taxa"},{default:t(()=>[l(B,null,{default:t(()=>[l(b,{cols:"12"},{default:t(()=>[he,l(K,{modelValue:f.value,"onUpdate:modelValue":o[0]||(o[0]=r=>f.value=r),class:"pt-0 mt-0",clearable:"","no-resize":"",filled:"","clear-icon":"mdi-close-circle"},null,8,["modelValue"])]),_:1}),l(b,{cols:"12",class:"dark-label"},{default:t(()=>[ge,l(y,{modelValue:h.value,"onUpdate:modelValue":o[1]||(o[1]=r=>h.value=r),color:"primary",inset:"",label:"extra",density:"compact","hide-details":""},null,8,["modelValue"]),l(y,{modelValue:m.value,"onUpdate:modelValue":o[2]||(o[2]=r=>m.value=r),color:"primary",inset:"",label:"equate_il",density:"compact","hide-details":""},null,8,["modelValue"]),l(y,{modelValue:g.value,"onUpdate:modelValue":o[3]||(o[3]=r=>g.value=r),color:"primary",inset:"",label:"names",density:"compact","hide-details":""},null,8,["modelValue"])]),_:1}),l(b,{cols:"12"},{default:t(()=>[l(U,{class:"col-12 col-sm-2 float-end",color:"primary",onClick:R},{default:t(()=>[e(" Try it! ")]),_:1})]),_:1})]),_:1})]),_:1},8,["response"])]),_:1}))}});const Ce=W(Ae,[["__scopeId","data-v-b2f419ab"]]);export{Ce as default};
